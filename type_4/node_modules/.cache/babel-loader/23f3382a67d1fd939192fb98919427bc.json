{"ast":null,"code":"import React from 'react';\n\nclass Codes extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.cppBubbleSort = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void swap(int *xp, int *yp)\\n' + '{\\n' + '\tint temp = *xp;\\n' + '\t*xp = *yp;\\n' + '\t*yp = temp;\\n' + '}\\n' + '\\n' + 'void bubbleSort(int arr[], int n)\\n' + '{\\n' + '\tint i, j;\\n' + '\tfor (i = 0; i < n-1; i++)\t\\n' + '\t\\n' + '\tfor (j = 0; j < n-i-1; j++)\\n' + '\t\tif (arr[j] > arr[j+1])\\n' + '\t\t\tswap(&arr[j], &arr[j+1]);\\n' + '}\\n' + '\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '    cout << \"Bubble-sort output:\" << endl;\\n' + '\tint i;\\n' + '\tfor (i = 0; i < size; i++)\\n' + '\t\tcout << arr[i] << \" \";\\n' + '\tcout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = {64, 34, 25, 12, 22, 11, 90};\\n' + '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n' + '\tbubbleSort(arr, n);\\n' + '\t// cout<<\"Sorted array: \\n\";\\n' + '\tprintArray(arr, n);\\n' + '    ofstream myfile(\"test-case-1-bubble-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\treturn 0;\\n' + '}\\n' + ';';\n    this.cppInsertionSort = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void insertionSort(int arr[], int n)\\n' + '{\\n' + '\tint i, key, j;\\n' + '\tfor (i = 1; i < n; i++)\\n' + '\t{\\n' + '\t\tkey = arr[i];\\n' + '\t\tj = i - 1;\\n' + '\\n' + '\t\twhile (j >= 0 && arr[j] > key)\\n' + '\t\t{\\n' + '\t\t\tarr[j + 1] = arr[j];\\n' + '\t\t\tj = j - 1;\\n' + '\t\t}\\n' + '\t\tarr[j + 1] = key;\\n' + '\t}\\n' + '}\\n' + '\\n' + 'void printArray(int arr[], int n)\\n' + '{\\n' + '    cout << \"Insertion-sort output:\" << endl;\\n' + '\tint i;\\n' + '\tfor (i = 0; i < n; i++)\\n' + '\t\tcout << arr[i] << \" \";\\n' + '\tcout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = { 12, 11, 13, 5, 6 };\\n' + '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n' + '\\n' + '\tinsertionSort(arr, n);\\n' + '\tprintArray(arr, n);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-insertion-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '\treturn 0;\\n' + '}';\n    this.cppMergeSort = '// C++ program for Merge Sort\\n' + '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + '// Merges two subarrays of array[].\\n' + '// First subarray is arr[begin..mid]\\n' + '// Second subarray is arr[mid+1..end]\\n' + 'void merge(int array[], int const left, int const mid, int const right)\\n' + '{\\n' + '    auto const subArrayOne = mid - left + 1;\\n' + '    auto const subArrayTwo = right - mid;\\n' + '\\n' + '    // Create temp arrays\\n' + '    auto *leftArray = new int[subArrayOne],\\n' + '         *rightArray = new int[subArrayTwo];\\n' + '\\n' + '    // Copy data to temp arrays leftArray[] and rightArray[]\\n' + '    for (auto i = 0; i < subArrayOne; i++)\\n' + '        leftArray[i] = array[left + i];\\n' + '    for (auto j = 0; j < subArrayTwo; j++)\\n' + '        rightArray[j] = array[mid + 1 + j];\\n' + '\\n' + '    auto indexOfSubArrayOne = 0,   // Initial index of first sub-array\\n' + '        indexOfSubArrayTwo = 0;    // Initial index of second sub-array\\n' + '    int indexOfMergedArray = left; // Initial index of merged array\\n' + '\\n' + '    // Merge the temp arrays back into array[left..right]\\n' + '    while (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo)\\n' + '    {\\n' + '        if (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo])\\n' + '        {\\n' + '            array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n' + '            indexOfSubArrayOne++;\\n' + '        }\\n' + '        else\\n' + '        {\\n' + '            array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n' + '            indexOfSubArrayTwo++;\\n' + '        }\\n' + '        indexOfMergedArray++;\\n' + '    }\\n' + '    // Copy the remaining elements of\\n' + '    // left[], if there are any\\n' + '    while (indexOfSubArrayOne < subArrayOne)\\n' + '    {\\n' + '        array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n' + '        indexOfSubArrayOne++;\\n' + '        indexOfMergedArray++;\\n' + '    }\\n' + '    // Copy the remaining elements of\\n' + '    // right[], if there are any\\n' + '    while (indexOfSubArrayTwo < subArrayTwo)\\n' + '    {\\n' + '        array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n' + '        indexOfSubArrayTwo++;\\n' + '        indexOfMergedArray++;\\n' + '    }\\n' + '}\\n' + '\\n' + '// begin is for left index and end is\\n' + '// right index of the sub-array\\n' + '// of arr to be sorted */\\n' + 'void mergeSort(int array[], int const begin, int const end)\\n' + '{\\n' + '    if (begin >= end)\\n' + '        return; // Returns recursively\\n' + '\\n' + '    auto mid = begin + (end - begin) / 2;\\n' + '    mergeSort(array, begin, mid);\\n' + '    mergeSort(array, mid + 1, end);\\n' + '    merge(array, begin, mid, end);\\n' + '}\\n' + '\\n' + '// UTILITY FUNCTIONS\\n' + '// Function to print an array\\n' + 'void printArray(int A[], int size)\\n' + '{\\n' + '    cout << \"Merge-sort output:\" << endl;\\n' + '    for (auto i = 0; i < size; i++)\\n' + '        cout << A[i] << \" \";\\n' + '    cout << endl;\\n' + '}\\n' + '\\n' + '// Driver code\\n' + 'int main()\\n' + '{\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '    // for(int i=0; i<n; i++){\\n' + '    //     cout << arr[i] << endl;\\n' + '    // }\\n' + '\\n' + '    // int arr[] = { 12, 11, 13, 5, 6, 7 };\\n' + '    auto arr_size = n;\\n' + '\\n' + '    // cout << \"Given array is \\n\";\\n' + '    // printArray(arr, arr_size);\\n' + '\\n' + '    mergeSort(arr, 0, arr_size - 1);\\n' + '\\n' + '    // cout << \"\\nSorted array is \\n\";\\n' + '    printArray(arr, arr_size);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-merge-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '    return 0;\\n' + '}\\n' + '';\n    this.cppQuickSort = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void swap(int* a, int* b)\\n' + '{\\n' + '\tint t = *a;\\n' + '\t*a = *b;\\n' + '\t*b = t;\\n' + '}\\n' + '\\n' + 'int partition (int arr[], int low, int high)\\n' + '{\\n' + '\tint pivot = arr[high]; // pivot\\n' + '\tint i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far\\n' + '\\n' + '\tfor (int j = low; j <= high - 1; j++)\\n' + '\t{\\n' + '\t\tif (arr[j] < pivot)\\n' + '\t\t{\\n' + '\t\t\ti++; // increment index of smaller element\\n' + '\t\t\tswap(&arr[i], &arr[j]);\\n' + '\t\t}\\n' + '\t}\\n' + '\tswap(&arr[i + 1], &arr[high]);\\n' + '\treturn (i + 1);\\n' + '}\\n' + '\\n' + 'void quickSort(int arr[], int low, int high)\\n' + '{\\n' + '\tif (low < high)\\n' + '\t{\\n' + '\t\tint pi = partition(arr, low, high);\\n' + '\\n' + '\t\tquickSort(arr, low, pi - 1);\\n' + '\t\tquickSort(arr, pi + 1, high);\\n' + '\t}\\n' + '}\\n' + '\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '\tcout << \"Quick-sort output:\" << endl;\\n' + '\tint i;\\n' + '\tfor (i = 0; i < size; i++)\\n' + '\t\tcout << arr[i] << \" \";\\n' + '\tcout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '    \\n' + '\t// int arr[] = {10, 7, 8, 9, 1, 5};\\n' + '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n' + '\tquickSort(arr, 0, n - 1);\\n' + '\t// cout << \"Sorted array: \\n\";\\n' + '\tprintArray(arr, n);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-quick-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '\treturn 0;\\n' + '}';\n    this.cppSelectionSort = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void swap(int *xp, int *yp)\\n' + '{\\n' + '\tint temp = *xp;\\n' + '\t*xp = *yp;\\n' + '\t*yp = temp;\\n' + '}\\n' + '\\n' + 'void selectionSort(int arr[], int n)\\n' + '{\\n' + '\tint i, j, min_idx;\\n' + '\\n' + '\tfor (i = 0; i < n-1; i++)\\n' + '\t{\\n' + '\t\tmin_idx = i;\\n' + '\t\tfor (j = i+1; j < n; j++)\\n' + '\t\tif (arr[j] < arr[min_idx])\\n' + '\t\t\tmin_idx = j;\\n' + '\\n' + '\t\tswap(&arr[min_idx], &arr[i]);\\n' + '\t}\\n' + '}\\n' + '\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '    cout << \"Selection-sort output:\" << endl;\\n' + '\tint i;\\n' + '\tfor (i=0; i < size; i++)\\n' + '\t\tcout << arr[i] << \" \";\\n' + '\tcout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = {64, 25, 12, 22, 11};\\n' + '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n' + '\tselectionSort(arr, n);\\n' + '\t// cout << \"Sorted array: \\n\";\\n' + '\tprintArray(arr, n);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-selection-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '\treturn 0;\\n' + '}';\n    this.cppReverseArray = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void rvereseArray(int arr[], int start, int end)\\n' + '{\\n' + '\twhile (start < end)\\n' + '\t{\\n' + '\t\tint temp = arr[start];\\n' + '\t\tarr[start] = arr[end];\\n' + '\t\tarr[end] = temp;\\n' + '\t\tstart++;\\n' + '\t\tend--;\\n' + '\t}\\n' + '}\t\\n' + '\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + 'for (int i = 0; i < size; i++)\\n' + 'cout << arr[i] << \" \";\\n' + '\\n' + 'cout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = {1, 2, 3, 4, 5, 6};\\n' + '\t\\n' + '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n' + '\\n' + '\t// printArray(arr, n);\\n' + '\t\\n' + '\trvereseArray(arr, 0, n-1);\\n' + '\t\\n' + '\t// cout << \"Reversed array is\" << endl;\\n' + '\t\\n' + '\t// printArray(arr, n);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-reverse-array-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\t\\n' + '\treturn 0;\\n' + '}\\n' + '';\n    this.cppCyclicArray = '# include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void rotate(int arr[], int n)\\n' + '{\\n' + '\tint x = arr[n - 1], i;\\n' + '\tfor (i = n - 1; i > 0; i--)\\n' + '\tarr[i] = arr[i - 1];\\n' + '\tarr[0] = x;\\n' + '}\\n' + '\\n' + 'int main(int argc, char** argv)\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n' + '    strcat(str1, argv[1]);\\n' + '    printf(\"Filepath: %s\\n\", str1);\\n' + '    // filename = \"../test-case-analysis-prototype/\"+argv[1];\\n' + '    file.open(str1);\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = {1, 2, 3, 4, 5}, i;\\n' + '\t// int n = sizeof(arr) /\\n' + '\t// \t\tsizeof(arr[0]);\\n' + '\\n' + '\t// cout << \"Given array is \\n\";\\n' + '\t// for (i = 0; i < n; i++)\\n' + '\t// \tcout << arr[i] << \\' \\';\\n' + '\\n' + '\trotate(arr, n);\\n' + '\\n' + '\t// cout << \"\\nRotated array is\\n\";\\n' + '\t// for (i = 0; i < n; i++)\\n' + '\t// \tcout << arr[i] << \\' \\';\\n' + '    fstream myfile;\\n' + '    myfile.open(\"../test-case-analysis-prototype/output.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '\treturn 0;\\n' + '}';\n    this.cBubbleSort = 'java bubblesort';\n    this.cInsertionSort = 'java insertionsort';\n    this.cMergeSort = 'java mergesort';\n    this.cQuickSort = 'java quicksort';\n    this.cSelectionSort = 'java selectionsort';\n    this.pythonBubbleSort = 'python bubblesort';\n    this.pythonInsertionSort = 'python insertionsort';\n    this.pythonMergeSort = 'python mergesort';\n    this.pythonQuickSort = 'python quicksort';\n    this.pythonSelectionSort = 'python selectionsort';\n    this.pyReverseArray = 'def reverseList(A, start, end):\\n' + '\twhile start < end:\\n' + '\t\tA[start], A[end] = A[end], A[start]\\n' + '\t\tstart += 1\\n' + '\t\tend -= 1\\n' + '\\n' + 'arr = []\\n' + 'n = -1\\n' + 'flag = 0\\n' + 'file1 = open(\"test-case-1.txt\", \"r\")\\n' + 'Lines = file1.readlines()\\n' + 'for line in Lines:\\n' + '    curr_line = line.strip()\\n' + '    # print(curr_line)\\n' + '    converted_num = int(curr_line)\\n' + '    # print(converted_num)\\n' + '    if(flag==0):\\n' + '        flag = 1\\n' + '        n = converted_num\\n' + '    else:\\n' + '        arr.append(converted_num)\\n' + '\\n' + '# A = [1, 2, 3, 4, 5, 6]\\n' + '# print(A)\\n' + 'reverseList(arr, 0, n-1)\\n' + '# print(\"Reversed list is\")\\n' + '# print(A)\\n' + '\\n' + 'file1 = open(\"output.txt\", \"w\")\\n' + 'for i in range(0, n):\\n' + '\t# print (arr[i], end = \" \")\\n' + '    converted_arr_i = str(arr[i])\\n' + '    file1.writelines(converted_arr_i)\\n' + '    file1.writelines(\"\\n\")\\n' + '# file1.writelines(L)\\n' + 'file1.close()';\n  }\n\n}\n\nexport default Codes;","map":{"version":3,"sources":["C:/Users/pavan/OneDrive/Documents/GitHub/Type-4-Clone-Detection-Prototype/type_4/src/Codes.js"],"names":["React","Codes","Component","cppBubbleSort","cppInsertionSort","cppMergeSort","cppQuickSort","cppSelectionSort","cppReverseArray","cppCyclicArray","cBubbleSort","cInsertionSort","cMergeSort","cQuickSort","cSelectionSort","pythonBubbleSort","pythonInsertionSort","pythonMergeSort","pythonQuickSort","pythonSelectionSort","pyReverseArray"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nclass Codes extends React.Component {\r\n    cppBubbleSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int *xp, int *yp)\\n'+\r\n    '{\\n'+\r\n    '\tint temp = *xp;\\n'+\r\n    '\t*xp = *yp;\\n'+\r\n    '\t*yp = temp;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void bubbleSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, j;\\n'+\r\n    '\tfor (i = 0; i < n-1; i++)\t\\n'+\r\n    '\t\\n'+\r\n    '\tfor (j = 0; j < n-i-1; j++)\\n'+\r\n    '\t\tif (arr[j] > arr[j+1])\\n'+\r\n    '\t\t\tswap(&arr[j], &arr[j+1]);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Bubble-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {64, 34, 25, 12, 22, 11, 90};\\n'+\r\n    '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n'+\r\n    '\tbubbleSort(arr, n);\\n'+\r\n    '\t// cout<<\"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '    ofstream myfile(\"test-case-1-bubble-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    ';';\r\n    cppInsertionSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void insertionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, key, j;\\n'+\r\n    '\tfor (i = 1; i < n; i++)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tkey = arr[i];\\n'+\r\n    '\t\tj = i - 1;\\n'+\r\n    '\\n'+\r\n    '\t\twhile (j >= 0 && arr[j] > key)\\n'+\r\n    '\t\t{\\n'+\r\n    '\t\t\tarr[j + 1] = arr[j];\\n'+\r\n    '\t\t\tj = j - 1;\\n'+\r\n    '\t\t}\\n'+\r\n    '\t\tarr[j + 1] = key;\\n'+\r\n    '\t}\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Insertion-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < n; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = { 12, 11, 13, 5, 6 };\\n'+\r\n    '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+\r\n    '\\n'+\r\n    '\tinsertionSort(arr, n);\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-insertion-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n    cppMergeSort = '// C++ program for Merge Sort\\n'+\r\n    '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    '// Merges two subarrays of array[].\\n'+\r\n    '// First subarray is arr[begin..mid]\\n'+\r\n    '// Second subarray is arr[mid+1..end]\\n'+\r\n    'void merge(int array[], int const left, int const mid, int const right)\\n'+\r\n    '{\\n'+\r\n    '    auto const subArrayOne = mid - left + 1;\\n'+\r\n    '    auto const subArrayTwo = right - mid;\\n'+\r\n    '\\n'+\r\n    '    // Create temp arrays\\n'+\r\n    '    auto *leftArray = new int[subArrayOne],\\n'+\r\n    '         *rightArray = new int[subArrayTwo];\\n'+\r\n    '\\n'+\r\n    '    // Copy data to temp arrays leftArray[] and rightArray[]\\n'+\r\n    '    for (auto i = 0; i < subArrayOne; i++)\\n'+\r\n    '        leftArray[i] = array[left + i];\\n'+\r\n    '    for (auto j = 0; j < subArrayTwo; j++)\\n'+\r\n    '        rightArray[j] = array[mid + 1 + j];\\n'+\r\n    '\\n'+\r\n    '    auto indexOfSubArrayOne = 0,   // Initial index of first sub-array\\n'+\r\n    '        indexOfSubArrayTwo = 0;    // Initial index of second sub-array\\n'+\r\n    '    int indexOfMergedArray = left; // Initial index of merged array\\n'+\r\n    '\\n'+\r\n    '    // Merge the temp arrays back into array[left..right]\\n'+\r\n    '    while (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo)\\n'+\r\n    '    {\\n'+\r\n    '        if (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo])\\n'+\r\n    '        {\\n'+\r\n    '            array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n'+\r\n    '            indexOfSubArrayOne++;\\n'+\r\n    '        }\\n'+\r\n    '        else\\n'+\r\n    '        {\\n'+\r\n    '            array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n'+\r\n    '            indexOfSubArrayTwo++;\\n'+\r\n    '        }\\n'+\r\n    '        indexOfMergedArray++;\\n'+\r\n    '    }\\n'+\r\n    '    // Copy the remaining elements of\\n'+\r\n    '    // left[], if there are any\\n'+\r\n    '    while (indexOfSubArrayOne < subArrayOne)\\n'+\r\n    '    {\\n'+\r\n    '        array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n'+\r\n    '        indexOfSubArrayOne++;\\n'+\r\n    '        indexOfMergedArray++;\\n'+\r\n    '    }\\n'+\r\n    '    // Copy the remaining elements of\\n'+\r\n    '    // right[], if there are any\\n'+\r\n    '    while (indexOfSubArrayTwo < subArrayTwo)\\n'+\r\n    '    {\\n'+\r\n    '        array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n'+\r\n    '        indexOfSubArrayTwo++;\\n'+\r\n    '        indexOfMergedArray++;\\n'+\r\n    '    }\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// begin is for left index and end is\\n'+\r\n    '// right index of the sub-array\\n'+\r\n    '// of arr to be sorted */\\n'+\r\n    'void mergeSort(int array[], int const begin, int const end)\\n'+\r\n    '{\\n'+\r\n    '    if (begin >= end)\\n'+\r\n    '        return; // Returns recursively\\n'+\r\n    '\\n'+\r\n    '    auto mid = begin + (end - begin) / 2;\\n'+\r\n    '    mergeSort(array, begin, mid);\\n'+\r\n    '    mergeSort(array, mid + 1, end);\\n'+\r\n    '    merge(array, begin, mid, end);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// UTILITY FUNCTIONS\\n'+\r\n    '// Function to print an array\\n'+\r\n    'void printArray(int A[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Merge-sort output:\" << endl;\\n'+\r\n    '    for (auto i = 0; i < size; i++)\\n'+\r\n    '        cout << A[i] << \" \";\\n'+\r\n    '    cout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<n; i++){\\n'+\r\n    '    //     cout << arr[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    // int arr[] = { 12, 11, 13, 5, 6, 7 };\\n'+\r\n    '    auto arr_size = n;\\n'+\r\n    '\\n'+\r\n    '    // cout << \"Given array is \\n\";\\n'+\r\n    '    // printArray(arr, arr_size);\\n'+\r\n    '\\n'+\r\n    '    mergeSort(arr, 0, arr_size - 1);\\n'+\r\n    '\\n'+\r\n    '    // cout << \"\\nSorted array is \\n\";\\n'+\r\n    '    printArray(arr, arr_size);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-merge-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '    return 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n    cppQuickSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int* a, int* b)\\n'+\r\n    '{\\n'+\r\n    '\tint t = *a;\\n'+\r\n    '\t*a = *b;\\n'+\r\n    '\t*b = t;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int partition (int arr[], int low, int high)\\n'+\r\n    '{\\n'+\r\n    '\tint pivot = arr[high]; // pivot\\n'+\r\n    '\tint i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far\\n'+\r\n    '\\n'+\r\n    '\tfor (int j = low; j <= high - 1; j++)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tif (arr[j] < pivot)\\n'+\r\n    '\t\t{\\n'+\r\n    '\t\t\ti++; // increment index of smaller element\\n'+\r\n    '\t\t\tswap(&arr[i], &arr[j]);\\n'+\r\n    '\t\t}\\n'+\r\n    '\t}\\n'+\r\n    '\tswap(&arr[i + 1], &arr[high]);\\n'+\r\n    '\treturn (i + 1);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void quickSort(int arr[], int low, int high)\\n'+\r\n    '{\\n'+\r\n    '\tif (low < high)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tint pi = partition(arr, low, high);\\n'+\r\n    '\\n'+\r\n    '\t\tquickSort(arr, low, pi - 1);\\n'+\r\n    '\t\tquickSort(arr, pi + 1, high);\\n'+\r\n    '\t}\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '\tcout << \"Quick-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    \\n'+\r\n    '\t// int arr[] = {10, 7, 8, 9, 1, 5};\\n'+\r\n    '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+\r\n    '\tquickSort(arr, 0, n - 1);\\n'+\r\n    '\t// cout << \"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-quick-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n    cppSelectionSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int *xp, int *yp)\\n'+\r\n    '{\\n'+\r\n    '\tint temp = *xp;\\n'+\r\n    '\t*xp = *yp;\\n'+\r\n    '\t*yp = temp;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void selectionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, j, min_idx;\\n'+\r\n    '\\n'+\r\n    '\tfor (i = 0; i < n-1; i++)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tmin_idx = i;\\n'+\r\n    '\t\tfor (j = i+1; j < n; j++)\\n'+\r\n    '\t\tif (arr[j] < arr[min_idx])\\n'+\r\n    '\t\t\tmin_idx = j;\\n'+\r\n    '\\n'+\r\n    '\t\tswap(&arr[min_idx], &arr[i]);\\n'+\r\n    '\t}\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Selection-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i=0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {64, 25, 12, 22, 11};\\n'+\r\n    '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n'+\r\n    '\tselectionSort(arr, n);\\n'+\r\n    '\t// cout << \"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-selection-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n    cppReverseArray = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void rvereseArray(int arr[], int start, int end)\\n'+\r\n    '{\\n'+\r\n    '\twhile (start < end)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tint temp = arr[start];\\n'+\r\n    '\t\tarr[start] = arr[end];\\n'+\r\n    '\t\tarr[end] = temp;\\n'+\r\n    '\t\tstart++;\\n'+\r\n    '\t\tend--;\\n'+\r\n    '\t}\\n'+\r\n    '}\t\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    'for (int i = 0; i < size; i++)\\n'+\r\n    'cout << arr[i] << \" \";\\n'+\r\n    '\\n'+\r\n    'cout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {1, 2, 3, 4, 5, 6};\\n'+\r\n    '\t\\n'+\r\n    '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+\r\n    '\\n'+\r\n    '\t// printArray(arr, n);\\n'+\r\n    '\t\\n'+\r\n    '\trvereseArray(arr, 0, n-1);\\n'+\r\n    '\t\\n'+\r\n    '\t// cout << \"Reversed array is\" << endl;\\n'+\r\n    '\t\\n'+\r\n    '\t// printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-reverse-array-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\t\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cppCyclicArray = '# include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void rotate(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint x = arr[n - 1], i;\\n'+\r\n    '\tfor (i = n - 1; i > 0; i--)\\n'+\r\n    '\tarr[i] = arr[i - 1];\\n'+\r\n    '\tarr[0] = x;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main(int argc, char** argv)\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"Filepath: %s\\n\", str1);\\n'+\r\n    '    // filename = \"../test-case-analysis-prototype/\"+argv[1];\\n'+\r\n    '    file.open(str1);\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {1, 2, 3, 4, 5}, i;\\n'+\r\n    '\t// int n = sizeof(arr) /\\n'+\r\n    '\t// \t\tsizeof(arr[0]);\\n'+\r\n    '\\n'+\r\n    '\t// cout << \"Given array is \\n\";\\n'+\r\n    '\t// for (i = 0; i < n; i++)\\n'+\r\n    '\t// \tcout << arr[i] << \\' \\';\\n'+\r\n    '\\n'+\r\n    '\trotate(arr, n);\\n'+\r\n    '\\n'+\r\n    '\t// cout << \"\\nRotated array is\\n\";\\n'+\r\n    '\t// for (i = 0; i < n; i++)\\n'+\r\n    '\t// \tcout << arr[i] << \\' \\';\\n'+\r\n    '    fstream myfile;\\n'+\r\n    '    myfile.open(\"../test-case-analysis-prototype/output.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n\r\n    cBubbleSort = 'java bubblesort';\r\n    cInsertionSort = 'java insertionsort';\r\n    cMergeSort = 'java mergesort';\r\n    cQuickSort = 'java quicksort';\r\n    cSelectionSort = 'java selectionsort';\r\n    cReverseArray \r\n    pythonBubbleSort = 'python bubblesort';\r\n    pythonInsertionSort = 'python insertionsort';\r\n    pythonMergeSort = 'python mergesort';\r\n    pythonQuickSort = 'python quicksort';\r\n    pythonSelectionSort = 'python selectionsort';\r\n    pyReverseArray = 'def reverseList(A, start, end):\\n'+\r\n    '\twhile start < end:\\n'+\r\n    '\t\tA[start], A[end] = A[end], A[start]\\n'+\r\n    '\t\tstart += 1\\n'+\r\n    '\t\tend -= 1\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\"test-case-1.txt\", \"r\")\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '# A = [1, 2, 3, 4, 5, 6]\\n'+\r\n    '# print(A)\\n'+\r\n    'reverseList(arr, 0, n-1)\\n'+\r\n    '# print(\"Reversed list is\")\\n'+\r\n    '# print(A)\\n'+\r\n    '\\n'+\r\n    'file1 = open(\"output.txt\", \"w\")\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \" \")\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\"\\n\")\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()';\r\n}\r\n\r\nexport default Codes"]},"metadata":{},"sourceType":"module"}