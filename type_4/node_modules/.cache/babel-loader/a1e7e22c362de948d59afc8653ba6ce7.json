{"ast":null,"code":"import _createClass from\"C:/Users/pavan/OneDrive/Documents/GitHub/Type-4-Clone-Detection-Prototype/type_4/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"C:/Users/pavan/OneDrive/Documents/GitHub/Type-4-Clone-Detection-Prototype/type_4/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _inherits from\"C:/Users/pavan/OneDrive/Documents/GitHub/Type-4-Clone-Detection-Prototype/type_4/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/Users/pavan/OneDrive/Documents/GitHub/Type-4-Clone-Detection-Prototype/type_4/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React from'react';var Codes=/*#__PURE__*/function(_React$Component){_inherits(Codes,_React$Component);var _super=_createSuper(Codes);function Codes(){var _this;_classCallCheck(this,Codes);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.cppBubbleSort='#include <bits/stdc++.h>\\n'+'using namespace std;\\n'+'\\n'+'void swap(int *xp, int *yp)\\n'+'{\\n'+'\tint temp = *xp;\\n'+'\t*xp = *yp;\\n'+'\t*yp = temp;\\n'+'}\\n'+'\\n'+'void bubbleSort(int arr[], int n)\\n'+'{\\n'+'\tint i, j;\\n'+'\tfor (i = 0; i < n-1; i++)\t\\n'+'\t\\n'+'\tfor (j = 0; j < n-i-1; j++)\\n'+'\t\tif (arr[j] > arr[j+1])\\n'+'\t\t\tswap(&arr[j], &arr[j+1]);\\n'+'}\\n'+'\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'    cout << \"Bubble-sort output:\" << endl;\\n'+'\tint i;\\n'+'\tfor (i = 0; i < size; i++)\\n'+'\t\tcout << arr[i] << \" \";\\n'+'\tcout << endl;\\n'+'}\\n'+'\\n'+'int main()\\n'+'{\\n'+'    fstream file;\\n'+'    string word, t, q, filename;\\n'+'    vector<int> fileInputs;\\n'+'    filename = \"./test-cases/test-case-1.txt\";\\n'+'    file.open(filename.c_str());\\n'+'    while (file >> word)\\n'+'    {\\n'+'        fileInputs.push_back(stoi(word));\\n'+'    }\\n'+'    // for(int i=0; i<fileInputs.size(); i++){\\n'+'    //     cout << fileInputs[i] << endl;\\n'+'    // }\\n'+'\\n'+'    int n = fileInputs[0];\\n'+'    int arr[n];\\n'+'    for (int i = 0; i < n; i++)\\n'+'    {\\n'+'        arr[i] = fileInputs[i + 1];\\n'+'    }\\n'+'\\n'+'\t// int arr[] = {64, 34, 25, 12, 22, 11, 90};\\n'+'\t// int n = sizeof(arr)/sizeof(arr[0]);\\n'+'\tbubbleSort(arr, n);\\n'+'\t// cout<<\"Sorted array: \\n\";\\n'+'\tprintArray(arr, n);\\n'+'    ofstream myfile(\"test-case-1-bubble-sort-cpp.txt\");\\n'+'    if (myfile.is_open())\\n'+'    {\\n'+'        for (int count = 0; count < n; count++)\\n'+'        {\\n'+'            myfile << arr[count] << endl;\\n'+'        }\\n'+'        myfile.close();\\n'+'    }\\n'+'    else\\n'+'        cout << \"Unable to open file\";\\n'+'\treturn 0;\\n'+'}\\n'+';';_this.cppInsertionSort='#include <bits/stdc++.h>\\n'+'using namespace std;\\n'+'\\n'+'void insertionSort(int arr[], int n)\\n'+'{\\n'+'\tint i, key, j;\\n'+'\tfor (i = 1; i < n; i++)\\n'+'\t{\\n'+'\t\tkey = arr[i];\\n'+'\t\tj = i - 1;\\n'+'\\n'+'\t\twhile (j >= 0 && arr[j] > key)\\n'+'\t\t{\\n'+'\t\t\tarr[j + 1] = arr[j];\\n'+'\t\t\tj = j - 1;\\n'+'\t\t}\\n'+'\t\tarr[j + 1] = key;\\n'+'\t}\\n'+'}\\n'+'\\n'+'void printArray(int arr[], int n)\\n'+'{\\n'+'    cout << \"Insertion-sort output:\" << endl;\\n'+'\tint i;\\n'+'\tfor (i = 0; i < n; i++)\\n'+'\t\tcout << arr[i] << \" \";\\n'+'\tcout << endl;\\n'+'}\\n'+'\\n'+'int main()\\n'+'{\\n'+'\\n'+'    fstream file;\\n'+'    string word, t, q, filename;\\n'+'    vector<int> fileInputs;\\n'+'    filename = \"./test-cases/test-case-1.txt\";\\n'+'    file.open(filename.c_str());\\n'+'    while (file >> word)\\n'+'    {\\n'+'        fileInputs.push_back(stoi(word));\\n'+'    }\\n'+'    // for(int i=0; i<fileInputs.size(); i++){\\n'+'    //     cout << fileInputs[i] << endl;\\n'+'    // }\\n'+'\\n'+'    int n = fileInputs[0];\\n'+'    int arr[n];\\n'+'    for (int i = 0; i < n; i++)\\n'+'    {\\n'+'        arr[i] = fileInputs[i + 1];\\n'+'    }\\n'+'\\n'+'\t// int arr[] = { 12, 11, 13, 5, 6 };\\n'+'\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+'\\n'+'\tinsertionSort(arr, n);\\n'+'\tprintArray(arr, n);\\n'+'\\n'+'    ofstream myfile(\"test-case-1-insertion-sort-cpp.txt\");\\n'+'    if (myfile.is_open())\\n'+'    {\\n'+'        for (int count = 0; count < n; count++)\\n'+'        {\\n'+'            myfile << arr[count] << endl;\\n'+'        }\\n'+'        myfile.close();\\n'+'    }\\n'+'    else\\n'+'        cout << \"Unable to open file\";\\n'+'\\n'+'\treturn 0;\\n'+'}';_this.cppMergeSort='// C++ program for Merge Sort\\n'+'#include <bits/stdc++.h>\\n'+'using namespace std;\\n'+'\\n'+'// Merges two subarrays of array[].\\n'+'// First subarray is arr[begin..mid]\\n'+'// Second subarray is arr[mid+1..end]\\n'+'void merge(int array[], int const left, int const mid, int const right)\\n'+'{\\n'+'    auto const subArrayOne = mid - left + 1;\\n'+'    auto const subArrayTwo = right - mid;\\n'+'\\n'+'    // Create temp arrays\\n'+'    auto *leftArray = new int[subArrayOne],\\n'+'         *rightArray = new int[subArrayTwo];\\n'+'\\n'+'    // Copy data to temp arrays leftArray[] and rightArray[]\\n'+'    for (auto i = 0; i < subArrayOne; i++)\\n'+'        leftArray[i] = array[left + i];\\n'+'    for (auto j = 0; j < subArrayTwo; j++)\\n'+'        rightArray[j] = array[mid + 1 + j];\\n'+'\\n'+'    auto indexOfSubArrayOne = 0,   // Initial index of first sub-array\\n'+'        indexOfSubArrayTwo = 0;    // Initial index of second sub-array\\n'+'    int indexOfMergedArray = left; // Initial index of merged array\\n'+'\\n'+'    // Merge the temp arrays back into array[left..right]\\n'+'    while (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo)\\n'+'    {\\n'+'        if (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo])\\n'+'        {\\n'+'            array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n'+'            indexOfSubArrayOne++;\\n'+'        }\\n'+'        else\\n'+'        {\\n'+'            array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n'+'            indexOfSubArrayTwo++;\\n'+'        }\\n'+'        indexOfMergedArray++;\\n'+'    }\\n'+'    // Copy the remaining elements of\\n'+'    // left[], if there are any\\n'+'    while (indexOfSubArrayOne < subArrayOne)\\n'+'    {\\n'+'        array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n'+'        indexOfSubArrayOne++;\\n'+'        indexOfMergedArray++;\\n'+'    }\\n'+'    // Copy the remaining elements of\\n'+'    // right[], if there are any\\n'+'    while (indexOfSubArrayTwo < subArrayTwo)\\n'+'    {\\n'+'        array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n'+'        indexOfSubArrayTwo++;\\n'+'        indexOfMergedArray++;\\n'+'    }\\n'+'}\\n'+'\\n'+'// begin is for left index and end is\\n'+'// right index of the sub-array\\n'+'// of arr to be sorted */\\n'+'void mergeSort(int array[], int const begin, int const end)\\n'+'{\\n'+'    if (begin >= end)\\n'+'        return; // Returns recursively\\n'+'\\n'+'    auto mid = begin + (end - begin) / 2;\\n'+'    mergeSort(array, begin, mid);\\n'+'    mergeSort(array, mid + 1, end);\\n'+'    merge(array, begin, mid, end);\\n'+'}\\n'+'\\n'+'// UTILITY FUNCTIONS\\n'+'// Function to print an array\\n'+'void printArray(int A[], int size)\\n'+'{\\n'+'    cout << \"Merge-sort output:\" << endl;\\n'+'    for (auto i = 0; i < size; i++)\\n'+'        cout << A[i] << \" \";\\n'+'    cout << endl;\\n'+'}\\n'+'\\n'+'// Driver code\\n'+'int main()\\n'+'{\\n'+'    fstream file;\\n'+'    string word, t, q, filename;\\n'+'    vector<int> fileInputs;\\n'+'    filename = \"./test-cases/test-case-1.txt\";\\n'+'    file.open(filename.c_str());\\n'+'    while (file >> word)\\n'+'    {\\n'+'        fileInputs.push_back(stoi(word));\\n'+'    }\\n'+'    // for(int i=0; i<fileInputs.size(); i++){\\n'+'    //     cout << fileInputs[i] << endl;\\n'+'    // }\\n'+'\\n'+'    int n = fileInputs[0];\\n'+'    int arr[n];\\n'+'    for (int i = 0; i < n; i++)\\n'+'    {\\n'+'        arr[i] = fileInputs[i + 1];\\n'+'    }\\n'+'    // for(int i=0; i<n; i++){\\n'+'    //     cout << arr[i] << endl;\\n'+'    // }\\n'+'\\n'+'    // int arr[] = { 12, 11, 13, 5, 6, 7 };\\n'+'    auto arr_size = n;\\n'+'\\n'+'    // cout << \"Given array is \\n\";\\n'+'    // printArray(arr, arr_size);\\n'+'\\n'+'    mergeSort(arr, 0, arr_size - 1);\\n'+'\\n'+'    // cout << \"\\nSorted array is \\n\";\\n'+'    printArray(arr, arr_size);\\n'+'\\n'+'    ofstream myfile(\"test-case-1-merge-sort-cpp.txt\");\\n'+'    if (myfile.is_open())\\n'+'    {\\n'+'        for (int count = 0; count < n; count++)\\n'+'        {\\n'+'            myfile << arr[count] << endl;\\n'+'        }\\n'+'        myfile.close();\\n'+'    }\\n'+'    else\\n'+'        cout << \"Unable to open file\";\\n'+'\\n'+'    return 0;\\n'+'}\\n'+'';_this.cppQuickSort='#include <bits/stdc++.h>\\n'+'using namespace std;\\n'+'\\n'+'void swap(int* a, int* b)\\n'+'{\\n'+'\tint t = *a;\\n'+'\t*a = *b;\\n'+'\t*b = t;\\n'+'}\\n'+'\\n'+'int partition (int arr[], int low, int high)\\n'+'{\\n'+'\tint pivot = arr[high]; // pivot\\n'+'\tint i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far\\n'+'\\n'+'\tfor (int j = low; j <= high - 1; j++)\\n'+'\t{\\n'+'\t\tif (arr[j] < pivot)\\n'+'\t\t{\\n'+'\t\t\ti++; // increment index of smaller element\\n'+'\t\t\tswap(&arr[i], &arr[j]);\\n'+'\t\t}\\n'+'\t}\\n'+'\tswap(&arr[i + 1], &arr[high]);\\n'+'\treturn (i + 1);\\n'+'}\\n'+'\\n'+'void quickSort(int arr[], int low, int high)\\n'+'{\\n'+'\tif (low < high)\\n'+'\t{\\n'+'\t\tint pi = partition(arr, low, high);\\n'+'\\n'+'\t\tquickSort(arr, low, pi - 1);\\n'+'\t\tquickSort(arr, pi + 1, high);\\n'+'\t}\\n'+'}\\n'+'\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'\tcout << \"Quick-sort output:\" << endl;\\n'+'\tint i;\\n'+'\tfor (i = 0; i < size; i++)\\n'+'\t\tcout << arr[i] << \" \";\\n'+'\tcout << endl;\\n'+'}\\n'+'\\n'+'int main()\\n'+'{\\n'+'\\n'+'    fstream file;\\n'+'    string word, t, q, filename;\\n'+'    vector<int> fileInputs;\\n'+'    filename = \"./test-cases/test-case-1.txt\";\\n'+'    file.open(filename.c_str());\\n'+'    while (file >> word)\\n'+'    {\\n'+'        fileInputs.push_back(stoi(word));\\n'+'    }\\n'+'    // for(int i=0; i<fileInputs.size(); i++){\\n'+'    //     cout << fileInputs[i] << endl;\\n'+'    // }\\n'+'\\n'+'    int n = fileInputs[0];\\n'+'    int arr[n];\\n'+'    for (int i = 0; i < n; i++)\\n'+'    {\\n'+'        arr[i] = fileInputs[i + 1];\\n'+'    }\\n'+'\\n'+'    \\n'+'\t// int arr[] = {10, 7, 8, 9, 1, 5};\\n'+'\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+'\tquickSort(arr, 0, n - 1);\\n'+'\t// cout << \"Sorted array: \\n\";\\n'+'\tprintArray(arr, n);\\n'+'\\n'+'    ofstream myfile(\"test-case-1-quick-sort-cpp.txt\");\\n'+'    if (myfile.is_open())\\n'+'    {\\n'+'        for (int count = 0; count < n; count++)\\n'+'        {\\n'+'            myfile << arr[count] << endl;\\n'+'        }\\n'+'        myfile.close();\\n'+'    }\\n'+'    else\\n'+'        cout << \"Unable to open file\";\\n'+'\\n'+'\treturn 0;\\n'+'}';_this.cppSelectionSort='#include <bits/stdc++.h>\\n'+'using namespace std;\\n'+'\\n'+'void swap(int *xp, int *yp)\\n'+'{\\n'+'\tint temp = *xp;\\n'+'\t*xp = *yp;\\n'+'\t*yp = temp;\\n'+'}\\n'+'\\n'+'void selectionSort(int arr[], int n)\\n'+'{\\n'+'\tint i, j, min_idx;\\n'+'\\n'+'\tfor (i = 0; i < n-1; i++)\\n'+'\t{\\n'+'\t\tmin_idx = i;\\n'+'\t\tfor (j = i+1; j < n; j++)\\n'+'\t\tif (arr[j] < arr[min_idx])\\n'+'\t\t\tmin_idx = j;\\n'+'\\n'+'\t\tswap(&arr[min_idx], &arr[i]);\\n'+'\t}\\n'+'}\\n'+'\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'    cout << \"Selection-sort output:\" << endl;\\n'+'\tint i;\\n'+'\tfor (i=0; i < size; i++)\\n'+'\t\tcout << arr[i] << \" \";\\n'+'\tcout << endl;\\n'+'}\\n'+'\\n'+'int main()\\n'+'{\\n'+'\\n'+'    fstream file;\\n'+'    string word, t, q, filename;\\n'+'    vector<int> fileInputs;\\n'+'    filename = \"./test-cases/test-case-1.txt\";\\n'+'    file.open(filename.c_str());\\n'+'    while (file >> word)\\n'+'    {\\n'+'        fileInputs.push_back(stoi(word));\\n'+'    }\\n'+'    // for(int i=0; i<fileInputs.size(); i++){\\n'+'    //     cout << fileInputs[i] << endl;\\n'+'    // }\\n'+'\\n'+'    int n = fileInputs[0];\\n'+'    int arr[n];\\n'+'    for (int i = 0; i < n; i++)\\n'+'    {\\n'+'        arr[i] = fileInputs[i + 1];\\n'+'    }\\n'+'\\n'+'\t// int arr[] = {64, 25, 12, 22, 11};\\n'+'\t// int n = sizeof(arr)/sizeof(arr[0]);\\n'+'\tselectionSort(arr, n);\\n'+'\t// cout << \"Sorted array: \\n\";\\n'+'\tprintArray(arr, n);\\n'+'\\n'+'    ofstream myfile(\"test-case-1-selection-sort-cpp.txt\");\\n'+'    if (myfile.is_open())\\n'+'    {\\n'+'        for (int count = 0; count < n; count++)\\n'+'        {\\n'+'            myfile << arr[count] << endl;\\n'+'        }\\n'+'        myfile.close();\\n'+'    }\\n'+'    else\\n'+'        cout << \"Unable to open file\";\\n'+'\\n'+'\treturn 0;\\n'+'}';_this.cppReverseArray='#include <bits/stdc++.h>\\n'+'using namespace std;\\n'+'\\n'+'void rvereseArray(int arr[], int start, int end)\\n'+'{\\n'+'\twhile (start < end)\\n'+'\t{\\n'+'\t\tint temp = arr[start];\\n'+'\t\tarr[start] = arr[end];\\n'+'\t\tarr[end] = temp;\\n'+'\t\tstart++;\\n'+'\t\tend--;\\n'+'\t}\\n'+'}\t\\n'+'\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'for (int i = 0; i < size; i++)\\n'+'cout << arr[i] << \" \";\\n'+'\\n'+'cout << endl;\\n'+'}\\n'+'\\n'+'int main()\\n'+'{\\n'+'\\n'+'    fstream file;\\n'+'    string word, t, q, filename;\\n'+'    vector<int> fileInputs;\\n'+'    filename = \"test-case-1.txt\";\\n'+'    file.open(filename.c_str());\\n'+'    while (file >> word)\\n'+'    {\\n'+'        fileInputs.push_back(stoi(word));\\n'+'    }\\n'+'    // for(int i=0; i<fileInputs.size(); i++){\\n'+'    //     cout << fileInputs[i] << endl;\\n'+'    // }\\n'+'\\n'+'    int n = fileInputs[0];\\n'+'    int arr[n];\\n'+'    for (int i = 0; i < n; i++)\\n'+'    {\\n'+'        arr[i] = fileInputs[i + 1];\\n'+'    }\\n'+'\\n'+'\t// int arr[] = {1, 2, 3, 4, 5, 6};\\n'+'\t\\n'+'\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+'\\n'+'\t// printArray(arr, n);\\n'+'\t\\n'+'\trvereseArray(arr, 0, n-1);\\n'+'\t\\n'+'\t// cout << \"Reversed array is\" << endl;\\n'+'\t\\n'+'\t// printArray(arr, n);\\n'+'\\n'+'    ofstream myfile(\"test-case-1-reverse-array-cpp.txt\");\\n'+'    if (myfile.is_open())\\n'+'    {\\n'+'        for (int count = 0; count < n; count++)\\n'+'        {\\n'+'            myfile << arr[count] << endl;\\n'+'        }\\n'+'        myfile.close();\\n'+'    }\\n'+'    else\\n'+'        cout << \"Unable to open file\";\\n'+'\t\\n'+'\treturn 0;\\n'+'}\\n'+'';_this.cppCyclicArray='# include <bits/stdc++.h>\\n'+'using namespace std;\\n'+'\\n'+'void rotate(int arr[], int n)\\n'+'{\\n'+'\tint x = arr[n - 1], i;\\n'+'\tfor (i = n - 1; i > 0; i--)\\n'+'\tarr[i] = arr[i - 1];\\n'+'\tarr[0] = x;\\n'+'}\\n'+'\\n'+'int main(int argc, char** argv)\\n'+'{\\n'+'\\n'+'    fstream file;\\n'+'    string word, t, q, filename;\\n'+'    vector<int> fileInputs;\\n'+'    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+'    strcat(str1, argv[1]);\\n'+'    printf(\"Filepath: %s\\n\", str1);\\n'+'    // filename = \"../test-case-analysis-prototype/\"+argv[1];\\n'+'    file.open(str1);\\n'+'    while (file >> word)\\n'+'    {\\n'+'        fileInputs.push_back(stoi(word));\\n'+'    }\\n'+'    // for(int i=0; i<fileInputs.size(); i++){\\n'+'    //     cout << fileInputs[i] << endl;\\n'+'    // }\\n'+'\\n'+'    int n = fileInputs[0];\\n'+'    int arr[n];\\n'+'    for (int i = 0; i < n; i++)\\n'+'    {\\n'+'        arr[i] = fileInputs[i + 1];\\n'+'    }\\n'+'\\n'+'\t// int arr[] = {1, 2, 3, 4, 5}, i;\\n'+'\t// int n = sizeof(arr) /\\n'+'\t// \t\tsizeof(arr[0]);\\n'+'\\n'+'\t// cout << \"Given array is \\n\";\\n'+'\t// for (i = 0; i < n; i++)\\n'+'\t// \tcout << arr[i] << \\' \\';\\n'+'\\n'+'\trotate(arr, n);\\n'+'\\n'+'\t// cout << \"\\nRotated array is\\n\";\\n'+'\t// for (i = 0; i < n; i++)\\n'+'\t// \tcout << arr[i] << \\' \\';\\n'+'    fstream myfile;\\n'+'    myfile.open(\"../test-case-analysis-prototype/output.txt\");\\n'+'    if (myfile.is_open())\\n'+'    {\\n'+'        for (int count = 0; count < n; count++)\\n'+'        {\\n'+'            myfile << arr[count] << endl;\\n'+'        }\\n'+'        myfile.close();\\n'+'    }\\n'+'    else\\n'+'        cout << \"Unable to open file\";\\n'+'\\n'+'\treturn 0;\\n'+'}';_this.cBubbleSort='// C program to implement\\n'+'// the above approach\\n'+'#include <stdio.h>\\n'+'#include <stdlib.h>\\n'+'#include <string.h>\\n'+'\\n'+'void swap(int* xp, int* yp)\\n'+'{\\n'+'    int temp = *xp;\\n'+'    *xp = *yp;\\n'+'    *yp = temp;\\n'+'}\\n'+' \\n'+'// A function to implement bubble sort\\n'+'void bubbleSort(int arr[], int n)\\n'+'{\\n'+'    int i, j;\\n'+'    for (i = 0; i < n - 1; i++)\\n'+' \\n'+'        // Last i elements are already in place\\n'+'        for (j = 0; j < n - i - 1; j++)\\n'+'            if (arr[j] > arr[j + 1])\\n'+'                swap(&arr[j], &arr[j + 1]);\\n'+'}\\n'+'\\n'+' \\n'+'/* Utility that prints out an array on a line */\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'  int i;\\n'+'  for (i=0; i < size; i++)\\n'+'    printf(\"%d \", arr[i]);\\n'+' \\n'+'  printf(\"\\n\");\\n'+'}\\n'+'\\n'+'// Driver code\\n'+'int main(int argc, char* argv[])\\n'+'{\\n'+'\tFILE* ptr;\\n'+'\tchar ch;\\n'+'\\n'+'\t// Opening file in reading mode\\n'+'\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+'    strcat(str1, argv[1]);\\n'+'    printf(\"fileCPath: %s\\n\", str1);\\n'+'\tptr = fopen(str1, \"r\");\\n'+'\\n'+'\tif (NULL == ptr) {\\n'+'\t\tprintf(\"file cant be opened \\n\");\\n'+'\t}\\n'+'\\n'+'\t// printf(\"content of this file are \\n\");\\n'+'\\n'+'\t// Printing what is written in file\\n'+'\t// character by character using loop.\\n'+'    char temp[101];\\n'+'    int idx = 0;\\n'+'    int arr_copy[101];\\n'+'    int arr_copy_idx = 0;\\n'+'\tdo {\\n'+'        char temp1[10] = \"\";\\n'+'        int idx1 = 0;\\n'+'\t\tch = fgetc(ptr);\\n'+'        if(ch==\\'\\\\n\\'){\\n'+'            for(int i=0; i<idx; i++){\\n'+'                temp1[idx1++] = temp[i];\\n'+'            }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'        }\\n'+'        else{\\n'+'            temp[idx++] = ch;\\n'+'        }\\n'+'\t} while (ch != EOF);\\n'+'\\n'+'    char temp1[10] = \"\";\\n'+'    int idx1 = 0;\\n'+'    for(int i=0; i<idx; i++){\\n'+'        for(int i=0; i<idx; i++){\\n'+'            temp1[idx1++] = temp[i];\\n'+'        }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'    }\\n'+'    // printf(\"\\n\");\\n'+'\\n'+'\t// Closing the file\\n'+'\tfclose(ptr);\\n'+'\\n'+'\\n'+'    int n = arr_copy[0];\\n'+'    int arr[n];\\n'+'    for(int i=1; i<=n; i++){\\n'+'        arr[i-1] = arr_copy[i];\\n'+'    }\\n'+'\\n'+'    // for(int i=0; i<=n; i++){\\n'+'    //     printf(\"%d \",arr_copy[i]);\\n'+'    // }\\n'+'\\n'+'    bubbleSort(arr, n);\\n'+'    // printf(\"Reversed array is \\n\");\\n'+'    // printArray(arr, n);\\n'+'\\n'+'\\n'+'\\n'+'   FILE *fptr;\\n'+'\\n'+'   // use appropriate location if you are using MacOS or Linux\\n'+'   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+'\\n'+'   if(fptr == NULL)\\n'+'   {\\n'+'      printf(\"Error!\");   \\n'+'      exit(1);             \\n'+'   }\\n'+'\\n'+'//    fprintf(fptr,\"%d\",num);\\n'+'   for(int i=0; i<n; i++){\\n'+'       fprintf(fptr,\"%d\\n\",arr[i]);\\n'+'   }\\n'+'   fclose(fptr);\\n'+'\\n'+'\treturn 0;\\n'+'}\\n'+'';_this.cInsertionSort='// C program to implement\\n'+'// the above approach\\n'+'#include <stdio.h>\\n'+'#include <stdlib.h>\\n'+'#include <string.h>\\n'+'\\n'+'void insertionSort(int arr[], int n)\\n'+'{\\n'+'    int i, key, j;\\n'+'    for (i = 1; i < n; i++) {\\n'+'        key = arr[i];\\n'+'        j = i - 1;\\n'+' \\n'+'        /* Move elements of arr[0..i-1], that are\\n'+'          greater than key, to one position ahead\\n'+'          of their current position */\\n'+'        while (j >= 0 && arr[j] > key) {\\n'+'            arr[j + 1] = arr[j];\\n'+'            j = j - 1;\\n'+'        }\\n'+'        arr[j + 1] = key;\\n'+'    }\\n'+'} \\n'+' \\n'+'/* Utility that prints out an array on a line */\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'  int i;\\n'+'  for (i=0; i < size; i++)\\n'+'    printf(\"%d \", arr[i]);\\n'+' \\n'+'  printf(\"\\n\");\\n'+'}\\n'+'\\n'+'// Driver code\\n'+'int main(int argc, char* argv[])\\n'+'{\\n'+'\tFILE* ptr;\\n'+'\tchar ch;\\n'+'\\n'+'\t// Opening file in reading mode\\n'+'\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+'    strcat(str1, argv[1]);\\n'+'    printf(\"fileCPath: %s\\n\", str1);\\n'+'\tptr = fopen(str1, \"r\");\\n'+'\\n'+'\tif (NULL == ptr) {\\n'+'\t\tprintf(\"file cant be opened \\n\");\\n'+'\t}\\n'+'\\n'+'\t// printf(\"content of this file are \\n\");\\n'+'\\n'+'\t// Printing what is written in file\\n'+'\t// character by character using loop.\\n'+'    char temp[101];\\n'+'    int idx = 0;\\n'+'    int arr_copy[101];\\n'+'    int arr_copy_idx = 0;\\n'+'\tdo {\\n'+'        char temp1[10] = \"\";\\n'+'        int idx1 = 0;\\n'+'\t\tch = fgetc(ptr);\\n'+'        if(ch==\\'\\\\n\\'){\\n'+'            for(int i=0; i<idx; i++){\\n'+'                temp1[idx1++] = temp[i];\\n'+'            }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'        }\\n'+'        else{\\n'+'            temp[idx++] = ch;\\n'+'        }\\n'+'\t} while (ch != EOF);\\n'+'\\n'+'    char temp1[10] = \"\";\\n'+'    int idx1 = 0;\\n'+'    for(int i=0; i<idx; i++){\\n'+'        for(int i=0; i<idx; i++){\\n'+'            temp1[idx1++] = temp[i];\\n'+'        }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'    }\\n'+'    // printf(\"\\n\");\\n'+'\\n'+'\t// Closing the file\\n'+'\tfclose(ptr);\\n'+'\\n'+'\\n'+'    int n = arr_copy[0];\\n'+'    int arr[n];\\n'+'    for(int i=1; i<=n; i++){\\n'+'        arr[i-1] = arr_copy[i];\\n'+'    }\\n'+'\\n'+'    // for(int i=0; i<=n; i++){\\n'+'    //     printf(\"%d \",arr_copy[i]);\\n'+'    // }\\n'+'\\n'+'    insertionSort(arr, n);\\n'+'    // printf(\"Reversed array is \\n\");\\n'+'    // printArray(arr, n);\\n'+'\\n'+'\\n'+'\\n'+'   FILE *fptr;\\n'+'\\n'+'   // use appropriate location if you are using MacOS or Linux\\n'+'   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+'\\n'+'   if(fptr == NULL)\\n'+'   {\\n'+'      printf(\"Error!\");   \\n'+'      exit(1);             \\n'+'   }\\n'+'\\n'+'//    fprintf(fptr,\"%d\",num);\\n'+'   for(int i=0; i<n; i++){\\n'+'       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+'   }\\n'+'   fclose(fptr);\\n'+'\\n'+'\treturn 0;\\n'+'}\\n'+'';_this.cMergeSort='// C program to implement\\n'+'// the above approach\\n'+'#include <stdio.h>\\n'+'#include <stdlib.h>\\n'+'#include <string.h>\\n'+'\\n'+'void merge(int arr[], int l, int m, int r)\\n'+'{\\n'+'    int i, j, k;\\n'+'    int n1 = m - l + 1;\\n'+'    int n2 = r - m;\\n'+'  \\n'+'    /* create temp arrays */\\n'+'    int L[n1], R[n2];\\n'+'  \\n'+'    /* Copy data to temp arrays L[] and R[] */\\n'+'    for (i = 0; i < n1; i++)\\n'+'        L[i] = arr[l + i];\\n'+'    for (j = 0; j < n2; j++)\\n'+'        R[j] = arr[m + 1 + j];\\n'+'  \\n'+'    /* Merge the temp arrays back into arr[l..r]*/\\n'+'    i = 0; // Initial index of first subarray\\n'+'    j = 0; // Initial index of second subarray\\n'+'    k = l; // Initial index of merged subarray\\n'+'    while (i < n1 && j < n2) {\\n'+'        if (L[i] <= R[j]) {\\n'+'            arr[k] = L[i];\\n'+'            i++;\\n'+'        }\\n'+'        else {\\n'+'            arr[k] = R[j];\\n'+'            j++;\\n'+'        }\\n'+'        k++;\\n'+'    }\\n'+'  \\n'+'    /* Copy the remaining elements of L[], if there\\n'+'    are any */\\n'+'    while (i < n1) {\\n'+'        arr[k] = L[i];\\n'+'        i++;\\n'+'        k++;\\n'+'    }\\n'+'  \\n'+'    /* Copy the remaining elements of R[], if there\\n'+'    are any */\\n'+'    while (j < n2) {\\n'+'        arr[k] = R[j];\\n'+'        j++;\\n'+'        k++;\\n'+'    }\\n'+'}\\n'+'  \\n'+'/* l is for left index and r is right index of the\\n'+'sub-array of arr to be sorted */\\n'+'void mergeSort(int arr[], int l, int r)\\n'+'{\\n'+'    if (l < r) {\\n'+'        // Same as (l+r)/2, but avoids overflow for\\n'+'        // large l and h\\n'+'        int m = l + (r - l) / 2;\\n'+'  \\n'+'        // Sort first and second halves\\n'+'        mergeSort(arr, l, m);\\n'+'        mergeSort(arr, m + 1, r);\\n'+'  \\n'+'        merge(arr, l, m, r);\\n'+'    }\\n'+'}\\n'+'\\n'+' \\n'+'/* Utility that prints out an array on a line */\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'  int i;\\n'+'  for (i=0; i < size; i++)\\n'+'    printf(\"%d \", arr[i]);\\n'+' \\n'+'  printf(\"\\n\");\\n'+'}\\n'+'\\n'+'// Driver code\\n'+'int main(int argc, char* argv[])\\n'+'{\\n'+'\tFILE* ptr;\\n'+'\tchar ch;\\n'+'\\n'+'\t// Opening file in reading mode\\n'+'    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+'    strcat(str1, argv[1]);\\n'+'    printf(\"fileCPath: %s\\n\", str1);\\n'+'\tptr = fopen(str1, \"r\");\\n'+'\\n'+'\tif (NULL == ptr) {\\n'+'\t\tprintf(\"file cant be opened \\n\");\\n'+'\t}\\n'+'\\n'+'\t// printf(\"content of this file are \\n\");\\n'+'\\n'+'\t// Printing what is written in file\\n'+'\t// character by character using loop.\\n'+'    char temp[101];\\n'+'    int idx = 0;\\n'+'    int arr_copy[101];\\n'+'    int arr_copy_idx = 0;\\n'+'\tdo {\\n'+'        char temp1[10] = \"\";\\n'+'        int idx1 = 0;\\n'+'\t\tch = fgetc(ptr);\\n'+'        if(ch==\\'\\\\n\\'){\\n'+'            for(int i=0; i<idx; i++){\\n'+'                temp1[idx1++] = temp[i];\\n'+'            }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'        }\\n'+'        else{\\n'+'            temp[idx++] = ch;\\n'+'        }\\n'+'\t} while (ch != EOF);\\n'+'\\n'+'    char temp1[10] = \"\";\\n'+'    int idx1 = 0;\\n'+'    for(int i=0; i<idx; i++){\\n'+'        for(int i=0; i<idx; i++){\\n'+'            temp1[idx1++] = temp[i];\\n'+'        }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'    }\\n'+'    // printf(\"\\n\");\\n'+'\\n'+'\t// Closing the file\\n'+'\tfclose(ptr);\\n'+'\\n'+'\\n'+'    int n = arr_copy[0];\\n'+'    int arr[n];\\n'+'    for(int i=1; i<=n; i++){\\n'+'        arr[i-1] = arr_copy[i];\\n'+'    }\\n'+'\\n'+'    // for(int i=0; i<=n; i++){\\n'+'    //     printf(\"%d \",arr_copy[i]);\\n'+'    // }\\n'+'\\n'+'    mergeSort(arr, 0, n - 1);\\n'+'    // printf(\"Reversed array is \\n\");\\n'+'    // printArray(arr, n);\\n'+'\\n'+'\\n'+'\\n'+'   FILE *fptr;\\n'+'\\n'+'   // use appropriate location if you are using MacOS or Linux\\n'+'   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+'\\n'+'   if(fptr == NULL)\\n'+'   {\\n'+'      printf(\"Error!\");   \\n'+'      exit(1);             \\n'+'   }\\n'+'\\n'+'//    fprintf(fptr,\"%d\",num);\\n'+'   for(int i=0; i<n; i++){\\n'+'       fprintf(fptr,\"%d\\n\",arr[i]);\\n'+'   }\\n'+'   fclose(fptr);\\n'+'\\n'+'\treturn 0;\\n'+'}\\n'+'';_this.cQuickSort='// C program to implement\\n'+'// the above approach\\n'+'#include <stdio.h>\\n'+'#include <stdlib.h>\\n'+'#include <string.h>\\n'+'\\n'+'void quicksort(int number[],int first,int last){\\n'+'   int i, j, pivot, temp;\\n'+'\\n'+'   if(first<last){\\n'+'      pivot=first;\\n'+'      i=first;\\n'+'      j=last;\\n'+'\\n'+'      while(i<j){\\n'+'         while(number[i]<=number[pivot]&&i<last)\\n'+'            i++;\\n'+'         while(number[j]>number[pivot])\\n'+'            j--;\\n'+'         if(i<j){\\n'+'            temp=number[i];\\n'+'            number[i]=number[j];\\n'+'            number[j]=temp;\\n'+'         }\\n'+'      }\\n'+'\\n'+'      temp=number[pivot];\\n'+'      number[pivot]=number[j];\\n'+'      number[j]=temp;\\n'+'      quicksort(number,first,j-1);\\n'+'      quicksort(number,j+1,last);\\n'+'\\n'+'   }\\n'+'}\\n'+'\\n'+' \\n'+'/* Utility that prints out an array on a line */\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'  int i;\\n'+'  for (i=0; i < size; i++)\\n'+'    printf(\"%d \", arr[i]);\\n'+' \\n'+'  printf(\"\\n\");\\n'+'}\\n'+'\\n'+'// Driver code\\n'+'int main(int argc, char* argv[])\\n'+'{\\n'+'\tFILE* ptr;\\n'+'\tchar ch;\\n'+'\\n'+'\t// Opening file in reading mode\\n'+'\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+'    strcat(str1, argv[1]);\\n'+'    printf(\"fileCPath: %s\\n\", str1);\\n'+'\tptr = fopen(str1, \"r\");\\n'+'\\n'+'\tif (NULL == ptr) {\\n'+'\t\tprintf(\"file cant be opened \\n\");\\n'+'\t}\\n'+'\\n'+'\t// printf(\"content of this file are \\n\");\\n'+'\\n'+'\t// Printing what is written in file\\n'+'\t// character by character using loop.\\n'+'    char temp[101];\\n'+'    int idx = 0;\\n'+'    int arr_copy[101];\\n'+'    int arr_copy_idx = 0;\\n'+'\tdo {\\n'+'        char temp1[10] = \"\";\\n'+'        int idx1 = 0;\\n'+'\t\tch = fgetc(ptr);\\n'+'        if(ch==\\'\\\\n\\'){\\n'+'            for(int i=0; i<idx; i++){\\n'+'                temp1[idx1++] = temp[i];\\n'+'            }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'        }\\n'+'        else{\\n'+'            temp[idx++] = ch;\\n'+'        }\\n'+'\t} while (ch != EOF);\\n'+'\\n'+'    char temp1[10] = \"\";\\n'+'    int idx1 = 0;\\n'+'    for(int i=0; i<idx; i++){\\n'+'        for(int i=0; i<idx; i++){\\n'+'            temp1[idx1++] = temp[i];\\n'+'        }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'    }\\n'+'    // printf(\"\\n\");\\n'+'\\n'+'\t// Closing the file\\n'+'\tfclose(ptr);\\n'+'\\n'+'\\n'+'    int n = arr_copy[0];\\n'+'    int arr[n];\\n'+'    for(int i=1; i<=n; i++){\\n'+'        arr[i-1] = arr_copy[i];\\n'+'    }\\n'+'\\n'+'    // for(int i=0; i<=n; i++){\\n'+'    //     printf(\"%d \",arr_copy[i]);\\n'+'    // }\\n'+'\\n'+'    quicksort(arr,0,n-1);\\n'+'    // printf(\"Reversed array is \\n\");\\n'+'    printArray(arr, n);\\n'+'\\n'+'\\n'+'\\n'+'   FILE *fptr;\\n'+'\\n'+'   // use appropriate location if you are using MacOS or Linux\\n'+'   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+'\\n'+'   if(fptr == NULL)\\n'+'   {\\n'+'      printf(\"Error!\");   \\n'+'      exit(1);             \\n'+'   }\\n'+'\\n'+'//    fprintf(fptr,\"%d\",num);\\n'+'   for(int i=0; i<n; i++){\\n'+'       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+'   }\\n'+'   fclose(fptr);\\n'+'\\n'+'\treturn 0;\\n'+'}\\n'+'';_this.cSelectionSort='// C program to implement\\n'+'// the above approach\\n'+'#include <stdio.h>\\n'+'#include <stdlib.h>\\n'+'#include <string.h>\\n'+'\\n'+'void swap(int *xp, int *yp)\\n'+'{\\n'+'    int temp = *xp;\\n'+'    *xp = *yp;\\n'+'    *yp = temp;\\n'+'}\\n'+'  \\n'+'void selectionSort(int arr[], int n)\\n'+'{\\n'+'    int i, j, min_idx;\\n'+'  \\n'+'    // One by one move boundary of unsorted subarray\\n'+'    for (i = 0; i < n-1; i++)\\n'+'    {\\n'+'        // Find the minimum element in unsorted array\\n'+'        min_idx = i;\\n'+'        for (j = i+1; j < n; j++)\\n'+'          if (arr[j] < arr[min_idx])\\n'+'            min_idx = j;\\n'+'  \\n'+'        // Swap the found minimum element with the first element\\n'+'        swap(&arr[min_idx], &arr[i]);\\n'+'    }\\n'+'} \\n'+' \\n'+'/* Utility that prints out an array on a line */\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'  int i;\\n'+'  for (i=0; i < size; i++)\\n'+'    printf(\"%d \", arr[i]);\\n'+' \\n'+'  printf(\"\\n\");\\n'+'}\\n'+'\\n'+'// Driver code\\n'+'int main(int argc, char* argv[])\\n'+'{\\n'+'\tFILE* ptr;\\n'+'\tchar ch;\\n'+'\\n'+'\t// Opening file in reading mode\\n'+'\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+'    strcat(str1, argv[1]);\\n'+'    printf(\"fileCPath: %s\\n\", str1);\\n'+'\tptr = fopen(str1, \"r\");\\n'+'\\n'+'\tif (NULL == ptr) {\\n'+'\t\tprintf(\"file cant be opened \\n\");\\n'+'\t}\\n'+'\\n'+'\t// printf(\"content of this file are \\n\");\\n'+'\\n'+'\t// Printing what is written in file\\n'+'\t// character by character using loop.\\n'+'    char temp[101];\\n'+'    int idx = 0;\\n'+'    int arr_copy[101];\\n'+'    int arr_copy_idx = 0;\\n'+'\tdo {\\n'+'        char temp1[10] = \"\";\\n'+'        int idx1 = 0;\\n'+'\t\tch = fgetc(ptr);\\n'+'        if(ch==\\'\\\\n\\'){\\n'+'            for(int i=0; i<idx; i++){\\n'+'                temp1[idx1++] = temp[i];\\n'+'            }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'        }\\n'+'        else{\\n'+'            temp[idx++] = ch;\\n'+'        }\\n'+'\t} while (ch != EOF);\\n'+'\\n'+'    char temp1[10] = \"\";\\n'+'    int idx1 = 0;\\n'+'    for(int i=0; i<idx; i++){\\n'+'        for(int i=0; i<idx; i++){\\n'+'            temp1[idx1++] = temp[i];\\n'+'        }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'    }\\n'+'    // printf(\"\\n\");\\n'+'\\n'+'\t// Closing the file\\n'+'\tfclose(ptr);\\n'+'\\n'+'\\n'+'    int n = arr_copy[0];\\n'+'    int arr[n];\\n'+'    for(int i=1; i<=n; i++){\\n'+'        arr[i-1] = arr_copy[i];\\n'+'    }\\n'+'\\n'+'    // for(int i=0; i<=n; i++){\\n'+'    //     printf(\"%d \",arr_copy[i]);\\n'+'    // }\\n'+'\\n'+'    selectionSort(arr, n);\\n'+'    // printf(\"Reversed array is \\n\");\\n'+'    // printArray(arr, n);\\n'+'\\n'+'\\n'+'\\n'+'   FILE *fptr;\\n'+'\\n'+'   // use appropriate location if you are using MacOS or Linux\\n'+'   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+'\\n'+'   if(fptr == NULL)\\n'+'   {\\n'+'      printf(\"Error!\");   \\n'+'      exit(1);             \\n'+'   }\\n'+'\\n'+'//    fprintf(fptr,\"%d\",num);\\n'+'   for(int i=0; i<n; i++){\\n'+'       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+'   }\\n'+'   fclose(fptr);\\n'+'\\n'+'\treturn 0;\\n'+'}\\n'+'';_this.cReverseArray='// C program to implement\\n'+'// the above approach\\n'+'#include <stdio.h>\\n'+'#include <stdlib.h>\\n'+'#include <string.h>\\n'+'\\n'+'void rvereseArray(int arr[], int start, int end)\\n'+'{\\n'+'    int temp;\\n'+'    while (start < end)\\n'+'    {\\n'+'        temp = arr[start];  \\n'+'        arr[start] = arr[end];\\n'+'        arr[end] = temp;\\n'+'        start++;\\n'+'        end--;\\n'+'    }  \\n'+'}    \\n'+' \\n'+'/* Utility that prints out an array on a line */\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'  int i;\\n'+'  for (i=0; i < size; i++)\\n'+'    printf(\"%d \", arr[i]);\\n'+' \\n'+'  printf(\"\\n\");\\n'+'}\\n'+'\\n'+'// Driver code\\n'+'int main(int argc, char* argv[])\\n'+'{\\n'+'\tFILE* ptr;\\n'+'\tchar ch;\\n'+'\\n'+'\t// Opening file in reading mode\\n'+'\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+'    strcat(str1, argv[1]);\\n'+'    printf(\"fileCPath: %s\\n\", str1);\\n'+'\tptr = fopen(str1, \"r\");\\n'+'\\n'+'\tif (NULL == ptr) {\\n'+'\t\tprintf(\"file cant be opened \\n\");\\n'+'\t}\\n'+'\\n'+'\t// printf(\"content of this file are \\n\");\\n'+'\\n'+'\t// Printing what is written in file\\n'+'\t// character by character using loop.\\n'+'    char temp[101];\\n'+'    int idx = 0;\\n'+'    int arr_copy[101];\\n'+'    int arr_copy_idx = 0;\\n'+'\tdo {\\n'+'        char temp1[10] = \"\";\\n'+'        int idx1 = 0;\\n'+'\t\tch = fgetc(ptr);\\n'+'        if(ch==\\'\\\\n\\'){\\n'+'            for(int i=0; i<idx; i++){\\n'+'                temp1[idx1++] = temp[i];\\n'+'            }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'        }\\n'+'        else{\\n'+'            temp[idx++] = ch;\\n'+'        }\\n'+'\t} while (ch != EOF);\\n'+'\\n'+'    char temp1[10] = \"\";\\n'+'    int idx1 = 0;\\n'+'    for(int i=0; i<idx; i++){\\n'+'        for(int i=0; i<idx; i++){\\n'+'            temp1[idx1++] = temp[i];\\n'+'        }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'    }\\n'+'    // printf(\"\\n\");\\n'+'\\n'+'\t// Closing the file\\n'+'\tfclose(ptr);\\n'+'\\n'+'\\n'+'    int n = arr_copy[0];\\n'+'    int arr[n];\\n'+'    for(int i=1; i<=n; i++){\\n'+'        arr[i-1] = arr_copy[i];\\n'+'    }\\n'+'\\n'+'    // for(int i=0; i<=n; i++){\\n'+'    //     printf(\"%d \",arr_copy[i]);\\n'+'    // }\\n'+'\\n'+'    rvereseArray(arr, 0, n-1);\\n'+'    // printf(\"Reversed array is \\n\");\\n'+'    printArray(arr, n);\\n'+'\\n'+'\\n'+'\\n'+'   FILE *fptr;\\n'+'\\n'+'   // use appropriate location if you are using MacOS or Linux\\n'+'   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+'\\n'+'   if(fptr == NULL)\\n'+'   {\\n'+'      printf(\"Error!\");   \\n'+'      exit(1);             \\n'+'   }\\n'+'\\n'+'//    fprintf(fptr,\"%d\",num);\\n'+'   for(int i=0; i<n; i++){\\n'+'       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+'   }\\n'+'   fclose(fptr);\\n'+'\\n'+'\treturn 0;\\n'+'}\\n'+'';_this.cCyclicArray='// C program to implement\\n'+'// the above approach\\n'+'#include <stdio.h>\\n'+'#include <stdlib.h>\\n'+'#include <string.h>\\n'+'\\n'+'void rotate(int arr[], int n)\\n'+'{\\n'+'   int x = arr[n-1], i;\\n'+'   for (i = n-1; i > 0; i--)\\n'+'      arr[i] = arr[i-1];\\n'+'   arr[0] = x;\\n'+'}\\n'+' \\n'+'/* Utility that prints out an array on a line */\\n'+'void printArray(int arr[], int size)\\n'+'{\\n'+'  int i;\\n'+'  for (i=0; i < size; i++)\\n'+'    printf(\"%d \", arr[i]);\\n'+' \\n'+'  printf(\"\\n\");\\n'+'}\\n'+'\\n'+'// Driver code\\n'+'int main(int argc, char* argv[])\\n'+'{\\n'+'\tFILE* ptr;\\n'+'\tchar ch;\\n'+'\\n'+'\t// Opening file in reading mode\\n'+'\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+'    strcat(str1, argv[1]);\\n'+'    printf(\"fileCPath: %s\\n\", str1);\\n'+'\tptr = fopen(str1, \"r\");\\n'+'\\n'+'\tif (NULL == ptr) {\\n'+'\t\tprintf(\"file cant be opened \\n\");\\n'+'\t}\\n'+'\\n'+'\t// printf(\"content of this file are \\n\");\\n'+'\\n'+'\t// Printing what is written in file\\n'+'\t// character by character using loop.\\n'+'    char temp[101];\\n'+'    int idx = 0;\\n'+'    int arr_copy[101];\\n'+'    int arr_copy_idx = 0;\\n'+'\tdo {\\n'+'        char temp1[10] = \"\";\\n'+'        int idx1 = 0;\\n'+'\t\tch = fgetc(ptr);\\n'+'        if(ch==\\'\\\\n\\'){\\n'+'            for(int i=0; i<idx; i++){\\n'+'                temp1[idx1++] = temp[i];\\n'+'            }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'        }\\n'+'        else{\\n'+'            temp[idx++] = ch;\\n'+'        }\\n'+'\t} while (ch != EOF);\\n'+'\\n'+'    char temp1[10] = \"\";\\n'+'    int idx1 = 0;\\n'+'    for(int i=0; i<idx; i++){\\n'+'        for(int i=0; i<idx; i++){\\n'+'            temp1[idx1++] = temp[i];\\n'+'        }\\n'+'            // printf(\"\\n\");\\n'+'            idx = 0;\\n'+'            // printf(\"%d\\n\",atoi(temp1));\\n'+'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+'    }\\n'+'    // printf(\"\\n\");\\n'+'\\n'+'\t// Closing the file\\n'+'\tfclose(ptr);\\n'+'\\n'+'\\n'+'    int n = arr_copy[0];\\n'+'    int arr[n];\\n'+'    for(int i=1; i<=n; i++){\\n'+'        arr[i-1] = arr_copy[i];\\n'+'    }\\n'+'\\n'+'    // for(int i=0; i<=n; i++){\\n'+'    //     printf(\"%d \",arr_copy[i]);\\n'+'    // }\\n'+'\\n'+'    rotate(arr, n);\\n'+'    // printf(\"Reversed array is \\n\");\\n'+'    printArray(arr, n);\\n'+'\\n'+'\\n'+'\\n'+'   FILE *fptr;\\n'+'\\n'+'   // use appropriate location if you are using MacOS or Linux\\n'+'   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+'\\n'+'   if(fptr == NULL)\\n'+'   {\\n'+'      printf(\"Error!\");   \\n'+'      exit(1);             \\n'+'   }\\n'+'\\n'+'//    fprintf(fptr,\"%d\",num);\\n'+'   for(int i=0; i<n; i++){\\n'+'       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+'   }\\n'+'   fclose(fptr);\\n'+'\\n'+'\treturn 0;\\n'+'}\\n'+'';_this.pyBubbleSort='import sys\\n'+'\\n'+'def bubbleSort(arr, n):\\n'+' \\n'+'    # Traverse through all array elements\\n'+'    for i in range(n):\\n'+' \\n'+'        # Last i elements are already in place\\n'+'        for j in range(0, n-i-1):\\n'+' \\n'+'            # traverse the array from 0 to n-i-1\\n'+'            # Swap if the element found is greater\\n'+'            # than the next element\\n'+'            if arr[j] > arr[j+1]:\\n'+'                arr[j], arr[j+1] = arr[j+1], arr[j]\\n'+'\\n'+'\\n'+'arr = []\\n'+'n = -1\\n'+'flag = 0\\n'+'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+'Lines = file1.readlines()\\n'+'for line in Lines:\\n'+'    curr_line = line.strip()\\n'+'    # print(curr_line)\\n'+'    converted_num = int(curr_line)\\n'+'    # print(converted_num)\\n'+'    if(flag==0):\\n'+'        flag = 1\\n'+'        n = converted_num\\n'+'    else:\\n'+'        arr.append(converted_num)\\n'+'\\n'+'#arr= [1, 2, 3, 4, 5]\\n'+'# n = len(arr)\\n'+'# print (\"Given array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'bubbleSort(arr, n)\\n'+'\\n'+'# print (\"\\nRotated array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+'for i in range(0, n):\\n'+'\t# print (arr[i], end = \\' \\')\\n'+'    converted_arr_i = str(arr[i])\\n'+'    file1.writelines(converted_arr_i)\\n'+'    file1.writelines(\\'\\\\n\\')\\n'+'# file1.writelines(L)\\n'+'file1.close()\\n'+'';_this.pyInsertionSort='import sys\\n'+'\\n'+'def insertionSort(arr, n):\\n'+' \\n'+'    # Traverse through 1 to len(arr)\\n'+'    for i in range(1, n):\\n'+' \\n'+'        key = arr[i]\\n'+' \\n'+'        # Move elements of arr[0..i-1], that are\\n'+'        # greater than key, to one position ahead\\n'+'        # of their current position\\n'+'        j = i-1\\n'+'        while j >= 0 and key < arr[j] :\\n'+'                arr[j + 1] = arr[j]\\n'+'                j -= 1\\n'+'        arr[j + 1] = key\\n'+'\\n'+'\\n'+'arr = []\\n'+'n = -1\\n'+'flag = 0\\n'+'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+'Lines = file1.readlines()\\n'+'for line in Lines:\\n'+'    curr_line = line.strip()\\n'+'    # print(curr_line)\\n'+'    converted_num = int(curr_line)\\n'+'    # print(converted_num)\\n'+'    if(flag==0):\\n'+'        flag = 1\\n'+'        n = converted_num\\n'+'    else:\\n'+'        arr.append(converted_num)\\n'+'\\n'+'#arr= [1, 2, 3, 4, 5]\\n'+'# n = len(arr)\\n'+'# print (\"Given array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'insertionSort(arr, n)\\n'+'\\n'+'# print (\"\\nRotated array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+'for i in range(0, n):\\n'+'\t# print (arr[i], end = \\' \\')\\n'+'    converted_arr_i = str(arr[i])\\n'+'    file1.writelines(converted_arr_i)\\n'+'    file1.writelines(\\'\\\\n\\')\\n'+'# file1.writelines(L)\\n'+'file1.close()\\n'+'';_this.pyMergeSort='import sys\\n'+'\\n'+'def mergeSort(arr):\\n'+'    if len(arr) > 1:\\n'+'  \\n'+'         # Finding the mid of the array\\n'+'        mid = len(arr)//2\\n'+'  \\n'+'        # Dividing the array elements\\n'+'        L = arr[:mid]\\n'+'  \\n'+'        # into 2 halves\\n'+'        R = arr[mid:]\\n'+'  \\n'+'        # Sorting the first half\\n'+'        mergeSort(L)\\n'+'  \\n'+'        # Sorting the second half\\n'+'        mergeSort(R)\\n'+'  \\n'+'        i = j = k = 0\\n'+'  \\n'+'        # Copy data to temp arrays L[] and R[]\\n'+'        while i < len(L) and j < len(R):\\n'+'            if L[i] < R[j]:\\n'+'                arr[k] = L[i]\\n'+'                i += 1\\n'+'            else:\\n'+'                arr[k] = R[j]\\n'+'                j += 1\\n'+'            k += 1\\n'+'  \\n'+'        # Checking if any element was left\\n'+'        while i < len(L):\\n'+'            arr[k] = L[i]\\n'+'            i += 1\\n'+'            k += 1\\n'+'  \\n'+'        while j < len(R):\\n'+'            arr[k] = R[j]\\n'+'            j += 1\\n'+'            k += 1\\n'+'\\n'+'\\n'+'arr = []\\n'+'n = -1\\n'+'flag = 0\\n'+'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+'Lines = file1.readlines()\\n'+'for line in Lines:\\n'+'    curr_line = line.strip()\\n'+'    # print(curr_line)\\n'+'    converted_num = int(curr_line)\\n'+'    # print(converted_num)\\n'+'    if(flag==0):\\n'+'        flag = 1\\n'+'        n = converted_num\\n'+'    else:\\n'+'        arr.append(converted_num)\\n'+'\\n'+'#arr= [1, 2, 3, 4, 5]\\n'+'# n = len(arr)\\n'+'# print (\"Given array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'mergeSort(arr)\\n'+'\\n'+'# print (\"\\nRotated array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+'for i in range(0, n):\\n'+'\t# print (arr[i], end = \\' \\')\\n'+'    converted_arr_i = str(arr[i])\\n'+'    file1.writelines(converted_arr_i)\\n'+'    file1.writelines(\\'\\\\n\\')\\n'+'# file1.writelines(L)\\n'+'file1.close()\\n'+'';_this.pyQuickSort='import sys\\n'+'\\n'+'def partition(arr, low, high):\\n'+'  pivot = arr[high]\\n'+'  i = low - 1\\n'+'  for j in range(low, high):\\n'+'    if arr[j] <= pivot:\\n'+'      i = i + 1\\n'+'      (arr[i], arr[j]) = (arr[j], arr[i])\\n'+'  (arr[i + 1], arr[high]) = (arr[high], arr[i + 1])\\n'+'  return i + 1\\n'+' \\n'+'\\n'+'def quick_sort(arr, low, high):\\n'+'  if low < high:\\n'+'    pi = partition(arr, low, high)\\n'+'    quick_sort(arr, low, pi - 1)\\n'+'    quick_sort(arr, pi + 1, high)\\n'+'\\n'+'\\n'+'arr = []\\n'+'n = -1\\n'+'flag = 0\\n'+'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+'Lines = file1.readlines()\\n'+'for line in Lines:\\n'+'    curr_line = line.strip()\\n'+'    # print(curr_line)\\n'+'    converted_num = int(curr_line)\\n'+'    # print(converted_num)\\n'+'    if(flag==0):\\n'+'        flag = 1\\n'+'        n = converted_num\\n'+'    else:\\n'+'        arr.append(converted_num)\\n'+'\\n'+'#arr= [1, 2, 3, 4, 5]\\n'+'# n = len(arr)\\n'+'# print (\"Given array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'# bubbleSort(arr, n)\\n'+'quick_sort(arr, 0, n - 1)\\n'+'\\n'+'# print (\"\\nRotated array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+'for i in range(0, n):\\n'+'\t# print (arr[i], end = \\' \\')\\n'+'    converted_arr_i = str(arr[i])\\n'+'    file1.writelines(converted_arr_i)\\n'+'    file1.writelines(\\'\\\\n\\')\\n'+'# file1.writelines(L)\\n'+'file1.close()\\n'+'';_this.pySelectionSort='import sys\\n'+'\\n'+'def selectionsort(arr, n):\\n'+'    for i in range(n):\\n'+'      \\n'+'        # Find the minimum element in remaining \\n'+'        # unsorted array\\n'+'        min_idx = i\\n'+'        for j in range(i+1, n):\\n'+'            if arr[min_idx] > arr[j]:\\n'+'                min_idx = j\\n'+'                \\n'+'        # Swap the found minimum element with \\n'+'        # the first element        \\n'+'        arr[i], arr[min_idx] = arr[min_idx], arr[i]\\n'+'\\n'+'\\n'+'arr = []\\n'+'n = -1\\n'+'flag = 0\\n'+'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+'Lines = file1.readlines()\\n'+'for line in Lines:\\n'+'    curr_line = line.strip()\\n'+'    # print(curr_line)\\n'+'    converted_num = int(curr_line)\\n'+'    # print(converted_num)\\n'+'    if(flag==0):\\n'+'        flag = 1\\n'+'        n = converted_num\\n'+'    else:\\n'+'        arr.append(converted_num)\\n'+'\\n'+'#arr= [1, 2, 3, 4, 5]\\n'+'# n = len(arr)\\n'+'# print (\"Given array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'selectionsort(arr, n)\\n'+'\\n'+'# print (\"\\nRotated array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+'for i in range(0, n):\\n'+'\t# print (arr[i], end = \\' \\')\\n'+'    converted_arr_i = str(arr[i])\\n'+'    file1.writelines(converted_arr_i)\\n'+'    file1.writelines(\\'\\\\n\\')\\n'+'# file1.writelines(L)\\n'+'file1.close()\\n'+'';_this.pyCyclicArray='import sys\\n'+'\\n'+'def rotate(arr, n):\\n'+'\tx = arr[n - 1]\\n'+'\t\\n'+'\tfor i in range(n - 1, 0, -1):\\n'+'\t\tarr[i] = arr[i - 1]\\n'+'\t\t\\n'+'\tarr[0] = x\\n'+'\\n'+'\\n'+'arr = []\\n'+'n = -1\\n'+'flag = 0\\n'+'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+'Lines = file1.readlines()\\n'+'for line in Lines:\\n'+'    curr_line = line.strip()\\n'+'    # print(curr_line)\\n'+'    converted_num = int(curr_line)\\n'+'    # print(converted_num)\\n'+'    if(flag==0):\\n'+'        flag = 1\\n'+'        n = converted_num\\n'+'    else:\\n'+'        arr.append(converted_num)\\n'+'\\n'+'#arr= [1, 2, 3, 4, 5]\\n'+'# n = len(arr)\\n'+'# print (\"Given array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'rotate(arr, n)\\n'+'\\n'+'# print (\"\\nRotated array is\")\\n'+'# for i in range(0, n):\\n'+'# \tprint (arr[i], end = \\' \\')\\n'+'\\n'+'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+'for i in range(0, n):\\n'+'\t# print (arr[i], end = \\' \\')\\n'+'    converted_arr_i = str(arr[i])\\n'+'    file1.writelines(converted_arr_i)\\n'+'    file1.writelines(\\'\\\\n\\')\\n'+'# file1.writelines(L)\\n'+'file1.close()\\n'+'';_this.pyReverseArray='def reverseList(A, start, end):\\n'+'\twhile start < end:\\n'+'\t\tA[start], A[end] = A[end], A[start]\\n'+'\t\tstart += 1\\n'+'\t\tend -= 1\\n'+'\\n'+'arr = []\\n'+'n = -1\\n'+'flag = 0\\n'+'file1 = open(\"test-case-1.txt\", \"r\")\\n'+'Lines = file1.readlines()\\n'+'for line in Lines:\\n'+'    curr_line = line.strip()\\n'+'    # print(curr_line)\\n'+'    converted_num = int(curr_line)\\n'+'    # print(converted_num)\\n'+'    if(flag==0):\\n'+'        flag = 1\\n'+'        n = converted_num\\n'+'    else:\\n'+'        arr.append(converted_num)\\n'+'\\n'+'# A = [1, 2, 3, 4, 5, 6]\\n'+'# print(A)\\n'+'reverseList(arr, 0, n-1)\\n'+'# print(\"Reversed list is\")\\n'+'# print(A)\\n'+'\\n'+'file1 = open(\"output.txt\", \"w\")\\n'+'for i in range(0, n):\\n'+'\t# print (arr[i], end = \" \")\\n'+'    converted_arr_i = str(arr[i])\\n'+'    file1.writelines(converted_arr_i)\\n'+'    file1.writelines(\"\\n\")\\n'+'# file1.writelines(L)\\n'+'file1.close()';return _this;}return _createClass(Codes);}(React.Component);export default Codes;","map":{"version":3,"sources":["C:/Users/pavan/OneDrive/Documents/GitHub/Type-4-Clone-Detection-Prototype/type_4/src/Codes.js"],"names":["React","Codes","cppBubbleSort","cppInsertionSort","cppMergeSort","cppQuickSort","cppSelectionSort","cppReverseArray","cppCyclicArray","cBubbleSort","cInsertionSort","cMergeSort","cQuickSort","cSelectionSort","cReverseArray","cCyclicArray","pyBubbleSort","pyInsertionSort","pyMergeSort","pyQuickSort","pySelectionSort","pyCyclicArray","pyReverseArray","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nclass Codes extends React.Component {\r\n    cppBubbleSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int *xp, int *yp)\\n'+\r\n    '{\\n'+\r\n    '\tint temp = *xp;\\n'+\r\n    '\t*xp = *yp;\\n'+\r\n    '\t*yp = temp;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void bubbleSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, j;\\n'+\r\n    '\tfor (i = 0; i < n-1; i++)\t\\n'+\r\n    '\t\\n'+\r\n    '\tfor (j = 0; j < n-i-1; j++)\\n'+\r\n    '\t\tif (arr[j] > arr[j+1])\\n'+\r\n    '\t\t\tswap(&arr[j], &arr[j+1]);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Bubble-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {64, 34, 25, 12, 22, 11, 90};\\n'+\r\n    '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n'+\r\n    '\tbubbleSort(arr, n);\\n'+\r\n    '\t// cout<<\"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '    ofstream myfile(\"test-case-1-bubble-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    ';';\r\n    cppInsertionSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void insertionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, key, j;\\n'+\r\n    '\tfor (i = 1; i < n; i++)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tkey = arr[i];\\n'+\r\n    '\t\tj = i - 1;\\n'+\r\n    '\\n'+\r\n    '\t\twhile (j >= 0 && arr[j] > key)\\n'+\r\n    '\t\t{\\n'+\r\n    '\t\t\tarr[j + 1] = arr[j];\\n'+\r\n    '\t\t\tj = j - 1;\\n'+\r\n    '\t\t}\\n'+\r\n    '\t\tarr[j + 1] = key;\\n'+\r\n    '\t}\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Insertion-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < n; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = { 12, 11, 13, 5, 6 };\\n'+\r\n    '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+\r\n    '\\n'+\r\n    '\tinsertionSort(arr, n);\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-insertion-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n    cppMergeSort = '// C++ program for Merge Sort\\n'+\r\n    '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    '// Merges two subarrays of array[].\\n'+\r\n    '// First subarray is arr[begin..mid]\\n'+\r\n    '// Second subarray is arr[mid+1..end]\\n'+\r\n    'void merge(int array[], int const left, int const mid, int const right)\\n'+\r\n    '{\\n'+\r\n    '    auto const subArrayOne = mid - left + 1;\\n'+\r\n    '    auto const subArrayTwo = right - mid;\\n'+\r\n    '\\n'+\r\n    '    // Create temp arrays\\n'+\r\n    '    auto *leftArray = new int[subArrayOne],\\n'+\r\n    '         *rightArray = new int[subArrayTwo];\\n'+\r\n    '\\n'+\r\n    '    // Copy data to temp arrays leftArray[] and rightArray[]\\n'+\r\n    '    for (auto i = 0; i < subArrayOne; i++)\\n'+\r\n    '        leftArray[i] = array[left + i];\\n'+\r\n    '    for (auto j = 0; j < subArrayTwo; j++)\\n'+\r\n    '        rightArray[j] = array[mid + 1 + j];\\n'+\r\n    '\\n'+\r\n    '    auto indexOfSubArrayOne = 0,   // Initial index of first sub-array\\n'+\r\n    '        indexOfSubArrayTwo = 0;    // Initial index of second sub-array\\n'+\r\n    '    int indexOfMergedArray = left; // Initial index of merged array\\n'+\r\n    '\\n'+\r\n    '    // Merge the temp arrays back into array[left..right]\\n'+\r\n    '    while (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo)\\n'+\r\n    '    {\\n'+\r\n    '        if (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo])\\n'+\r\n    '        {\\n'+\r\n    '            array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n'+\r\n    '            indexOfSubArrayOne++;\\n'+\r\n    '        }\\n'+\r\n    '        else\\n'+\r\n    '        {\\n'+\r\n    '            array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n'+\r\n    '            indexOfSubArrayTwo++;\\n'+\r\n    '        }\\n'+\r\n    '        indexOfMergedArray++;\\n'+\r\n    '    }\\n'+\r\n    '    // Copy the remaining elements of\\n'+\r\n    '    // left[], if there are any\\n'+\r\n    '    while (indexOfSubArrayOne < subArrayOne)\\n'+\r\n    '    {\\n'+\r\n    '        array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n'+\r\n    '        indexOfSubArrayOne++;\\n'+\r\n    '        indexOfMergedArray++;\\n'+\r\n    '    }\\n'+\r\n    '    // Copy the remaining elements of\\n'+\r\n    '    // right[], if there are any\\n'+\r\n    '    while (indexOfSubArrayTwo < subArrayTwo)\\n'+\r\n    '    {\\n'+\r\n    '        array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n'+\r\n    '        indexOfSubArrayTwo++;\\n'+\r\n    '        indexOfMergedArray++;\\n'+\r\n    '    }\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// begin is for left index and end is\\n'+\r\n    '// right index of the sub-array\\n'+\r\n    '// of arr to be sorted */\\n'+\r\n    'void mergeSort(int array[], int const begin, int const end)\\n'+\r\n    '{\\n'+\r\n    '    if (begin >= end)\\n'+\r\n    '        return; // Returns recursively\\n'+\r\n    '\\n'+\r\n    '    auto mid = begin + (end - begin) / 2;\\n'+\r\n    '    mergeSort(array, begin, mid);\\n'+\r\n    '    mergeSort(array, mid + 1, end);\\n'+\r\n    '    merge(array, begin, mid, end);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// UTILITY FUNCTIONS\\n'+\r\n    '// Function to print an array\\n'+\r\n    'void printArray(int A[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Merge-sort output:\" << endl;\\n'+\r\n    '    for (auto i = 0; i < size; i++)\\n'+\r\n    '        cout << A[i] << \" \";\\n'+\r\n    '    cout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<n; i++){\\n'+\r\n    '    //     cout << arr[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    // int arr[] = { 12, 11, 13, 5, 6, 7 };\\n'+\r\n    '    auto arr_size = n;\\n'+\r\n    '\\n'+\r\n    '    // cout << \"Given array is \\n\";\\n'+\r\n    '    // printArray(arr, arr_size);\\n'+\r\n    '\\n'+\r\n    '    mergeSort(arr, 0, arr_size - 1);\\n'+\r\n    '\\n'+\r\n    '    // cout << \"\\nSorted array is \\n\";\\n'+\r\n    '    printArray(arr, arr_size);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-merge-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '    return 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n    cppQuickSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int* a, int* b)\\n'+\r\n    '{\\n'+\r\n    '\tint t = *a;\\n'+\r\n    '\t*a = *b;\\n'+\r\n    '\t*b = t;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int partition (int arr[], int low, int high)\\n'+\r\n    '{\\n'+\r\n    '\tint pivot = arr[high]; // pivot\\n'+\r\n    '\tint i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far\\n'+\r\n    '\\n'+\r\n    '\tfor (int j = low; j <= high - 1; j++)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tif (arr[j] < pivot)\\n'+\r\n    '\t\t{\\n'+\r\n    '\t\t\ti++; // increment index of smaller element\\n'+\r\n    '\t\t\tswap(&arr[i], &arr[j]);\\n'+\r\n    '\t\t}\\n'+\r\n    '\t}\\n'+\r\n    '\tswap(&arr[i + 1], &arr[high]);\\n'+\r\n    '\treturn (i + 1);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void quickSort(int arr[], int low, int high)\\n'+\r\n    '{\\n'+\r\n    '\tif (low < high)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tint pi = partition(arr, low, high);\\n'+\r\n    '\\n'+\r\n    '\t\tquickSort(arr, low, pi - 1);\\n'+\r\n    '\t\tquickSort(arr, pi + 1, high);\\n'+\r\n    '\t}\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '\tcout << \"Quick-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    \\n'+\r\n    '\t// int arr[] = {10, 7, 8, 9, 1, 5};\\n'+\r\n    '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+\r\n    '\tquickSort(arr, 0, n - 1);\\n'+\r\n    '\t// cout << \"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-quick-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n    cppSelectionSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int *xp, int *yp)\\n'+\r\n    '{\\n'+\r\n    '\tint temp = *xp;\\n'+\r\n    '\t*xp = *yp;\\n'+\r\n    '\t*yp = temp;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void selectionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, j, min_idx;\\n'+\r\n    '\\n'+\r\n    '\tfor (i = 0; i < n-1; i++)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tmin_idx = i;\\n'+\r\n    '\t\tfor (j = i+1; j < n; j++)\\n'+\r\n    '\t\tif (arr[j] < arr[min_idx])\\n'+\r\n    '\t\t\tmin_idx = j;\\n'+\r\n    '\\n'+\r\n    '\t\tswap(&arr[min_idx], &arr[i]);\\n'+\r\n    '\t}\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Selection-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i=0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {64, 25, 12, 22, 11};\\n'+\r\n    '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n'+\r\n    '\tselectionSort(arr, n);\\n'+\r\n    '\t// cout << \"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-selection-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n    cppReverseArray = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void rvereseArray(int arr[], int start, int end)\\n'+\r\n    '{\\n'+\r\n    '\twhile (start < end)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tint temp = arr[start];\\n'+\r\n    '\t\tarr[start] = arr[end];\\n'+\r\n    '\t\tarr[end] = temp;\\n'+\r\n    '\t\tstart++;\\n'+\r\n    '\t\tend--;\\n'+\r\n    '\t}\\n'+\r\n    '}\t\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    'for (int i = 0; i < size; i++)\\n'+\r\n    'cout << arr[i] << \" \";\\n'+\r\n    '\\n'+\r\n    'cout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {1, 2, 3, 4, 5, 6};\\n'+\r\n    '\t\\n'+\r\n    '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+\r\n    '\\n'+\r\n    '\t// printArray(arr, n);\\n'+\r\n    '\t\\n'+\r\n    '\trvereseArray(arr, 0, n-1);\\n'+\r\n    '\t\\n'+\r\n    '\t// cout << \"Reversed array is\" << endl;\\n'+\r\n    '\t\\n'+\r\n    '\t// printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-reverse-array-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\t\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cppCyclicArray = '# include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void rotate(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint x = arr[n - 1], i;\\n'+\r\n    '\tfor (i = n - 1; i > 0; i--)\\n'+\r\n    '\tarr[i] = arr[i - 1];\\n'+\r\n    '\tarr[0] = x;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main(int argc, char** argv)\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"Filepath: %s\\n\", str1);\\n'+\r\n    '    // filename = \"../test-case-analysis-prototype/\"+argv[1];\\n'+\r\n    '    file.open(str1);\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {1, 2, 3, 4, 5}, i;\\n'+\r\n    '\t// int n = sizeof(arr) /\\n'+\r\n    '\t// \t\tsizeof(arr[0]);\\n'+\r\n    '\\n'+\r\n    '\t// cout << \"Given array is \\n\";\\n'+\r\n    '\t// for (i = 0; i < n; i++)\\n'+\r\n    '\t// \tcout << arr[i] << \\' \\';\\n'+\r\n    '\\n'+\r\n    '\trotate(arr, n);\\n'+\r\n    '\\n'+\r\n    '\t// cout << \"\\nRotated array is\\n\";\\n'+\r\n    '\t// for (i = 0; i < n; i++)\\n'+\r\n    '\t// \tcout << arr[i] << \\' \\';\\n'+\r\n    '    fstream myfile;\\n'+\r\n    '    myfile.open(\"../test-case-analysis-prototype/output.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n\r\n    cBubbleSort = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void swap(int* xp, int* yp)\\n'+\r\n    '{\\n'+\r\n    '    int temp = *xp;\\n'+\r\n    '    *xp = *yp;\\n'+\r\n    '    *yp = temp;\\n'+\r\n    '}\\n'+\r\n    ' \\n'+\r\n    '// A function to implement bubble sort\\n'+\r\n    'void bubbleSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '    int i, j;\\n'+\r\n    '    for (i = 0; i < n - 1; i++)\\n'+\r\n    ' \\n'+\r\n    '        // Last i elements are already in place\\n'+\r\n    '        for (j = 0; j < n - i - 1; j++)\\n'+\r\n    '            if (arr[j] > arr[j + 1])\\n'+\r\n    '                swap(&arr[j], &arr[j + 1]);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    bubbleSort(arr, n);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    // printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\"%d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cInsertionSort = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void insertionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '    int i, key, j;\\n'+\r\n    '    for (i = 1; i < n; i++) {\\n'+\r\n    '        key = arr[i];\\n'+\r\n    '        j = i - 1;\\n'+\r\n    ' \\n'+\r\n    '        /* Move elements of arr[0..i-1], that are\\n'+\r\n    '          greater than key, to one position ahead\\n'+\r\n    '          of their current position */\\n'+\r\n    '        while (j >= 0 && arr[j] > key) {\\n'+\r\n    '            arr[j + 1] = arr[j];\\n'+\r\n    '            j = j - 1;\\n'+\r\n    '        }\\n'+\r\n    '        arr[j + 1] = key;\\n'+\r\n    '    }\\n'+\r\n    '} \\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    insertionSort(arr, n);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    // printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cMergeSort = '// C program to implement\\n'+\r\n'// the above approach\\n'+\r\n'#include <stdio.h>\\n'+\r\n'#include <stdlib.h>\\n'+\r\n'#include <string.h>\\n'+\r\n'\\n'+\r\n'void merge(int arr[], int l, int m, int r)\\n'+\r\n'{\\n'+\r\n'    int i, j, k;\\n'+\r\n'    int n1 = m - l + 1;\\n'+\r\n'    int n2 = r - m;\\n'+\r\n'  \\n'+\r\n'    /* create temp arrays */\\n'+\r\n'    int L[n1], R[n2];\\n'+\r\n'  \\n'+\r\n'    /* Copy data to temp arrays L[] and R[] */\\n'+\r\n'    for (i = 0; i < n1; i++)\\n'+\r\n'        L[i] = arr[l + i];\\n'+\r\n'    for (j = 0; j < n2; j++)\\n'+\r\n'        R[j] = arr[m + 1 + j];\\n'+\r\n'  \\n'+\r\n'    /* Merge the temp arrays back into arr[l..r]*/\\n'+\r\n'    i = 0; // Initial index of first subarray\\n'+\r\n'    j = 0; // Initial index of second subarray\\n'+\r\n'    k = l; // Initial index of merged subarray\\n'+\r\n'    while (i < n1 && j < n2) {\\n'+\r\n'        if (L[i] <= R[j]) {\\n'+\r\n'            arr[k] = L[i];\\n'+\r\n'            i++;\\n'+\r\n'        }\\n'+\r\n'        else {\\n'+\r\n'            arr[k] = R[j];\\n'+\r\n'            j++;\\n'+\r\n'        }\\n'+\r\n'        k++;\\n'+\r\n'    }\\n'+\r\n'  \\n'+\r\n'    /* Copy the remaining elements of L[], if there\\n'+\r\n'    are any */\\n'+\r\n'    while (i < n1) {\\n'+\r\n'        arr[k] = L[i];\\n'+\r\n'        i++;\\n'+\r\n'        k++;\\n'+\r\n'    }\\n'+\r\n'  \\n'+\r\n'    /* Copy the remaining elements of R[], if there\\n'+\r\n'    are any */\\n'+\r\n'    while (j < n2) {\\n'+\r\n'        arr[k] = R[j];\\n'+\r\n'        j++;\\n'+\r\n'        k++;\\n'+\r\n'    }\\n'+\r\n'}\\n'+\r\n'  \\n'+\r\n'/* l is for left index and r is right index of the\\n'+\r\n'sub-array of arr to be sorted */\\n'+\r\n'void mergeSort(int arr[], int l, int r)\\n'+\r\n'{\\n'+\r\n'    if (l < r) {\\n'+\r\n'        // Same as (l+r)/2, but avoids overflow for\\n'+\r\n'        // large l and h\\n'+\r\n'        int m = l + (r - l) / 2;\\n'+\r\n'  \\n'+\r\n'        // Sort first and second halves\\n'+\r\n'        mergeSort(arr, l, m);\\n'+\r\n'        mergeSort(arr, m + 1, r);\\n'+\r\n'  \\n'+\r\n'        merge(arr, l, m, r);\\n'+\r\n'    }\\n'+\r\n'}\\n'+\r\n'\\n'+\r\n' \\n'+\r\n'/* Utility that prints out an array on a line */\\n'+\r\n'void printArray(int arr[], int size)\\n'+\r\n'{\\n'+\r\n'  int i;\\n'+\r\n'  for (i=0; i < size; i++)\\n'+\r\n'    printf(\"%d \", arr[i]);\\n'+\r\n' \\n'+\r\n'  printf(\"\\n\");\\n'+\r\n'}\\n'+\r\n'\\n'+\r\n'// Driver code\\n'+\r\n'int main(int argc, char* argv[])\\n'+\r\n'{\\n'+\r\n'\tFILE* ptr;\\n'+\r\n'\tchar ch;\\n'+\r\n'\\n'+\r\n'\t// Opening file in reading mode\\n'+\r\n'    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n'    strcat(str1, argv[1]);\\n'+\r\n'    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n'\tptr = fopen(str1, \"r\");\\n'+\r\n'\\n'+\r\n'\tif (NULL == ptr) {\\n'+\r\n'\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n'\t}\\n'+\r\n'\\n'+\r\n'\t// printf(\"content of this file are \\n\");\\n'+\r\n'\\n'+\r\n'\t// Printing what is written in file\\n'+\r\n'\t// character by character using loop.\\n'+\r\n'    char temp[101];\\n'+\r\n'    int idx = 0;\\n'+\r\n'    int arr_copy[101];\\n'+\r\n'    int arr_copy_idx = 0;\\n'+\r\n'\tdo {\\n'+\r\n'        char temp1[10] = \"\";\\n'+\r\n'        int idx1 = 0;\\n'+\r\n'\t\tch = fgetc(ptr);\\n'+\r\n'        if(ch==\\'\\\\n\\'){\\n'+\r\n'            for(int i=0; i<idx; i++){\\n'+\r\n'                temp1[idx1++] = temp[i];\\n'+\r\n'            }\\n'+\r\n'            // printf(\"\\n\");\\n'+\r\n'            idx = 0;\\n'+\r\n'            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n'        }\\n'+\r\n'        else{\\n'+\r\n'            temp[idx++] = ch;\\n'+\r\n'        }\\n'+\r\n'\t} while (ch != EOF);\\n'+\r\n'\\n'+\r\n'    char temp1[10] = \"\";\\n'+\r\n'    int idx1 = 0;\\n'+\r\n'    for(int i=0; i<idx; i++){\\n'+\r\n'        for(int i=0; i<idx; i++){\\n'+\r\n'            temp1[idx1++] = temp[i];\\n'+\r\n'        }\\n'+\r\n'            // printf(\"\\n\");\\n'+\r\n'            idx = 0;\\n'+\r\n'            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n'    }\\n'+\r\n'    // printf(\"\\n\");\\n'+\r\n'\\n'+\r\n'\t// Closing the file\\n'+\r\n'\tfclose(ptr);\\n'+\r\n'\\n'+\r\n'\\n'+\r\n'    int n = arr_copy[0];\\n'+\r\n'    int arr[n];\\n'+\r\n'    for(int i=1; i<=n; i++){\\n'+\r\n'        arr[i-1] = arr_copy[i];\\n'+\r\n'    }\\n'+\r\n'\\n'+\r\n'    // for(int i=0; i<=n; i++){\\n'+\r\n'    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n'    // }\\n'+\r\n'\\n'+\r\n'    mergeSort(arr, 0, n - 1);\\n'+\r\n'    // printf(\"Reversed array is \\n\");\\n'+\r\n'    // printArray(arr, n);\\n'+\r\n'\\n'+\r\n'\\n'+\r\n'\\n'+\r\n'   FILE *fptr;\\n'+\r\n'\\n'+\r\n'   // use appropriate location if you are using MacOS or Linux\\n'+\r\n'   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n'\\n'+\r\n'   if(fptr == NULL)\\n'+\r\n'   {\\n'+\r\n'      printf(\"Error!\");   \\n'+\r\n'      exit(1);             \\n'+\r\n'   }\\n'+\r\n'\\n'+\r\n'//    fprintf(fptr,\"%d\",num);\\n'+\r\n'   for(int i=0; i<n; i++){\\n'+\r\n'       fprintf(fptr,\"%d\\n\",arr[i]);\\n'+\r\n'   }\\n'+\r\n'   fclose(fptr);\\n'+\r\n'\\n'+\r\n'\treturn 0;\\n'+\r\n'}\\n'+\r\n'';\r\n\r\n    cQuickSort = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void quicksort(int number[],int first,int last){\\n'+\r\n    '   int i, j, pivot, temp;\\n'+\r\n    '\\n'+\r\n    '   if(first<last){\\n'+\r\n    '      pivot=first;\\n'+\r\n    '      i=first;\\n'+\r\n    '      j=last;\\n'+\r\n    '\\n'+\r\n    '      while(i<j){\\n'+\r\n    '         while(number[i]<=number[pivot]&&i<last)\\n'+\r\n    '            i++;\\n'+\r\n    '         while(number[j]>number[pivot])\\n'+\r\n    '            j--;\\n'+\r\n    '         if(i<j){\\n'+\r\n    '            temp=number[i];\\n'+\r\n    '            number[i]=number[j];\\n'+\r\n    '            number[j]=temp;\\n'+\r\n    '         }\\n'+\r\n    '      }\\n'+\r\n    '\\n'+\r\n    '      temp=number[pivot];\\n'+\r\n    '      number[pivot]=number[j];\\n'+\r\n    '      number[j]=temp;\\n'+\r\n    '      quicksort(number,first,j-1);\\n'+\r\n    '      quicksort(number,j+1,last);\\n'+\r\n    '\\n'+\r\n    '   }\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    quicksort(arr,0,n-1);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cSelectionSort = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void swap(int *xp, int *yp)\\n'+\r\n    '{\\n'+\r\n    '    int temp = *xp;\\n'+\r\n    '    *xp = *yp;\\n'+\r\n    '    *yp = temp;\\n'+\r\n    '}\\n'+\r\n    '  \\n'+\r\n    'void selectionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '    int i, j, min_idx;\\n'+\r\n    '  \\n'+\r\n    '    // One by one move boundary of unsorted subarray\\n'+\r\n    '    for (i = 0; i < n-1; i++)\\n'+\r\n    '    {\\n'+\r\n    '        // Find the minimum element in unsorted array\\n'+\r\n    '        min_idx = i;\\n'+\r\n    '        for (j = i+1; j < n; j++)\\n'+\r\n    '          if (arr[j] < arr[min_idx])\\n'+\r\n    '            min_idx = j;\\n'+\r\n    '  \\n'+\r\n    '        // Swap the found minimum element with the first element\\n'+\r\n    '        swap(&arr[min_idx], &arr[i]);\\n'+\r\n    '    }\\n'+\r\n    '} \\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    selectionSort(arr, n);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    // printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cReverseArray = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void rvereseArray(int arr[], int start, int end)\\n'+\r\n    '{\\n'+\r\n    '    int temp;\\n'+\r\n    '    while (start < end)\\n'+\r\n    '    {\\n'+\r\n    '        temp = arr[start];  \\n'+\r\n    '        arr[start] = arr[end];\\n'+\r\n    '        arr[end] = temp;\\n'+\r\n    '        start++;\\n'+\r\n    '        end--;\\n'+\r\n    '    }  \\n'+\r\n    '}    \\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    rvereseArray(arr, 0, n-1);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cCyclicArray = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void rotate(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '   int x = arr[n-1], i;\\n'+\r\n    '   for (i = n-1; i > 0; i--)\\n'+\r\n    '      arr[i] = arr[i-1];\\n'+\r\n    '   arr[0] = x;\\n'+\r\n    '}\\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    rotate(arr, n);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n\r\n    pyBubbleSort = 'import sys\\n'+\r\n    '\\n'+\r\n    'def bubbleSort(arr, n):\\n'+\r\n    ' \\n'+\r\n    '    # Traverse through all array elements\\n'+\r\n    '    for i in range(n):\\n'+\r\n    ' \\n'+\r\n    '        # Last i elements are already in place\\n'+\r\n    '        for j in range(0, n-i-1):\\n'+\r\n    ' \\n'+\r\n    '            # traverse the array from 0 to n-i-1\\n'+\r\n    '            # Swap if the element found is greater\\n'+\r\n    '            # than the next element\\n'+\r\n    '            if arr[j] > arr[j+1]:\\n'+\r\n    '                arr[j], arr[j+1] = arr[j+1], arr[j]\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '#arr= [1, 2, 3, 4, 5]\\n'+\r\n    '# n = len(arr)\\n'+\r\n    '# print (\"Given array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'bubbleSort(arr, n)\\n'+\r\n    '\\n'+\r\n    '# print (\"\\nRotated array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \\' \\')\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\\'\\\\n\\')\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()\\n'+\r\n    '';\r\n\r\n    pyInsertionSort = 'import sys\\n'+\r\n    '\\n'+\r\n    'def insertionSort(arr, n):\\n'+\r\n    ' \\n'+\r\n    '    # Traverse through 1 to len(arr)\\n'+\r\n    '    for i in range(1, n):\\n'+\r\n    ' \\n'+\r\n    '        key = arr[i]\\n'+\r\n    ' \\n'+\r\n    '        # Move elements of arr[0..i-1], that are\\n'+\r\n    '        # greater than key, to one position ahead\\n'+\r\n    '        # of their current position\\n'+\r\n    '        j = i-1\\n'+\r\n    '        while j >= 0 and key < arr[j] :\\n'+\r\n    '                arr[j + 1] = arr[j]\\n'+\r\n    '                j -= 1\\n'+\r\n    '        arr[j + 1] = key\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '#arr= [1, 2, 3, 4, 5]\\n'+\r\n    '# n = len(arr)\\n'+\r\n    '# print (\"Given array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'insertionSort(arr, n)\\n'+\r\n    '\\n'+\r\n    '# print (\"\\nRotated array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \\' \\')\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\\'\\\\n\\')\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()\\n'+\r\n    '';\r\n\r\n    pyMergeSort = 'import sys\\n'+\r\n    '\\n'+\r\n    'def mergeSort(arr):\\n'+\r\n    '    if len(arr) > 1:\\n'+\r\n    '  \\n'+\r\n    '         # Finding the mid of the array\\n'+\r\n    '        mid = len(arr)//2\\n'+\r\n    '  \\n'+\r\n    '        # Dividing the array elements\\n'+\r\n    '        L = arr[:mid]\\n'+\r\n    '  \\n'+\r\n    '        # into 2 halves\\n'+\r\n    '        R = arr[mid:]\\n'+\r\n    '  \\n'+\r\n    '        # Sorting the first half\\n'+\r\n    '        mergeSort(L)\\n'+\r\n    '  \\n'+\r\n    '        # Sorting the second half\\n'+\r\n    '        mergeSort(R)\\n'+\r\n    '  \\n'+\r\n    '        i = j = k = 0\\n'+\r\n    '  \\n'+\r\n    '        # Copy data to temp arrays L[] and R[]\\n'+\r\n    '        while i < len(L) and j < len(R):\\n'+\r\n    '            if L[i] < R[j]:\\n'+\r\n    '                arr[k] = L[i]\\n'+\r\n    '                i += 1\\n'+\r\n    '            else:\\n'+\r\n    '                arr[k] = R[j]\\n'+\r\n    '                j += 1\\n'+\r\n    '            k += 1\\n'+\r\n    '  \\n'+\r\n    '        # Checking if any element was left\\n'+\r\n    '        while i < len(L):\\n'+\r\n    '            arr[k] = L[i]\\n'+\r\n    '            i += 1\\n'+\r\n    '            k += 1\\n'+\r\n    '  \\n'+\r\n    '        while j < len(R):\\n'+\r\n    '            arr[k] = R[j]\\n'+\r\n    '            j += 1\\n'+\r\n    '            k += 1\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '#arr= [1, 2, 3, 4, 5]\\n'+\r\n    '# n = len(arr)\\n'+\r\n    '# print (\"Given array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'mergeSort(arr)\\n'+\r\n    '\\n'+\r\n    '# print (\"\\nRotated array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \\' \\')\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\\'\\\\n\\')\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()\\n'+\r\n    '';\r\n\r\n    pyQuickSort = 'import sys\\n'+\r\n    '\\n'+\r\n    'def partition(arr, low, high):\\n'+\r\n    '  pivot = arr[high]\\n'+\r\n    '  i = low - 1\\n'+\r\n    '  for j in range(low, high):\\n'+\r\n    '    if arr[j] <= pivot:\\n'+\r\n    '      i = i + 1\\n'+\r\n    '      (arr[i], arr[j]) = (arr[j], arr[i])\\n'+\r\n    '  (arr[i + 1], arr[high]) = (arr[high], arr[i + 1])\\n'+\r\n    '  return i + 1\\n'+\r\n    ' \\n'+\r\n    '\\n'+\r\n    'def quick_sort(arr, low, high):\\n'+\r\n    '  if low < high:\\n'+\r\n    '    pi = partition(arr, low, high)\\n'+\r\n    '    quick_sort(arr, low, pi - 1)\\n'+\r\n    '    quick_sort(arr, pi + 1, high)\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '#arr= [1, 2, 3, 4, 5]\\n'+\r\n    '# n = len(arr)\\n'+\r\n    '# print (\"Given array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    '# bubbleSort(arr, n)\\n'+\r\n    'quick_sort(arr, 0, n - 1)\\n'+\r\n    '\\n'+\r\n    '# print (\"\\nRotated array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \\' \\')\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\\'\\\\n\\')\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()\\n'+\r\n    '';\r\n    pySelectionSort = 'import sys\\n'+\r\n    '\\n'+\r\n    'def selectionsort(arr, n):\\n'+\r\n    '    for i in range(n):\\n'+\r\n    '      \\n'+\r\n    '        # Find the minimum element in remaining \\n'+\r\n    '        # unsorted array\\n'+\r\n    '        min_idx = i\\n'+\r\n    '        for j in range(i+1, n):\\n'+\r\n    '            if arr[min_idx] > arr[j]:\\n'+\r\n    '                min_idx = j\\n'+\r\n    '                \\n'+\r\n    '        # Swap the found minimum element with \\n'+\r\n    '        # the first element        \\n'+\r\n    '        arr[i], arr[min_idx] = arr[min_idx], arr[i]\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '#arr= [1, 2, 3, 4, 5]\\n'+\r\n    '# n = len(arr)\\n'+\r\n    '# print (\"Given array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'selectionsort(arr, n)\\n'+\r\n    '\\n'+\r\n    '# print (\"\\nRotated array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \\' \\')\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\\'\\\\n\\')\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()\\n'+\r\n    '';\r\n\r\n    pyCyclicArray = 'import sys\\n'+\r\n    '\\n'+\r\n    'def rotate(arr, n):\\n'+\r\n    '\tx = arr[n - 1]\\n'+\r\n    '\t\\n'+\r\n    '\tfor i in range(n - 1, 0, -1):\\n'+\r\n    '\t\tarr[i] = arr[i - 1]\\n'+\r\n    '\t\t\\n'+\r\n    '\tarr[0] = x\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '#arr= [1, 2, 3, 4, 5]\\n'+\r\n    '# n = len(arr)\\n'+\r\n    '# print (\"Given array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'rotate(arr, n)\\n'+\r\n    '\\n'+\r\n    '# print (\"\\nRotated array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \\' \\')\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\\'\\\\n\\')\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()\\n'+\r\n    '';\r\n\r\n    pyReverseArray = 'def reverseList(A, start, end):\\n'+\r\n    '\twhile start < end:\\n'+\r\n    '\t\tA[start], A[end] = A[end], A[start]\\n'+\r\n    '\t\tstart += 1\\n'+\r\n    '\t\tend -= 1\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\"test-case-1.txt\", \"r\")\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '# A = [1, 2, 3, 4, 5, 6]\\n'+\r\n    '# print(A)\\n'+\r\n    'reverseList(arr, 0, n-1)\\n'+\r\n    '# print(\"Reversed list is\")\\n'+\r\n    '# print(A)\\n'+\r\n    '\\n'+\r\n    'file1 = open(\"output.txt\", \"w\")\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \" \")\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\"\\n\")\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()';\r\n}\r\n\r\nexport default Codes"]},"metadata":{},"sourceType":"module"}