{"ast":null,"code":"import React from 'react';\n\nclass Codes extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.cppBubbleSort = '#include <bits/stdc++.h> <br>\\n' + 'using namespace std;\\n' + '\\n' + 'void swap(int *xp, int *yp)\\n' + '{\\n' + '\tint temp = *xp;\\n' + '\t*xp = *yp;\\n' + '\t*yp = temp;\\n' + '}\\n' + '\\n' + 'void bubbleSort(int arr[], int n)\\n' + '{\\n' + '\tint i, j;\\n' + '\tfor (i = 0; i < n-1; i++)\t\\n' + '\t\\n' + '\tfor (j = 0; j < n-i-1; j++)\\n' + '\t\tif (arr[j] > arr[j+1])\\n' + '\t\t\tswap(&arr[j], &arr[j+1]);\\n' + '}\\n' + '\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '    cout << \"Bubble-sort output:\" << endl;\\n' + '\tint i;\\n' + '\tfor (i = 0; i < size; i++)\\n' + '\t\tcout << arr[i] << \" \";\\n' + '\tcout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = {64, 34, 25, 12, 22, 11, 90};\\n' + '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n' + '\tbubbleSort(arr, n);\\n' + '\t// cout<<\"Sorted array: \\n\";\\n' + '\tprintArray(arr, n);\\n' + '    ofstream myfile(\"test-case-1-bubble-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\treturn 0;\\n' + '}\\n' + ';';\n    this.cppInsertionSort = 'cpp \\ninsertionsort';\n    this.cppMergeSort = 'cpp \\nmergesort';\n    this.cppQuickSort = 'cpp \\nquicksort';\n    this.cppSelectionSort = 'cpp \\nselectionsort';\n    this.javaBubbleSort = 'java bubblesort';\n    this.javaInsertionSort = 'java insertionsort';\n    this.javaMergeSort = 'java mergesort';\n    this.javaQuickSort = 'java quicksort';\n    this.javaSelectionSort = 'java selectionsort';\n    this.pythonBubbleSort = 'python bubblesort';\n    this.pythonInsertionSort = 'python insertionsort';\n    this.pythonMergeSort = 'python mergesort';\n    this.pythonQuickSort = 'python quicksort';\n    this.pythonSelectionSort = 'python selectionsort';\n  }\n\n}\n\nexport default Codes;","map":{"version":3,"sources":["E:/6th sem/SE/Type-4-Clone-Detection-Prototype/type-4-clone-detector/type-4/src/Codes.js"],"names":["React","Codes","Component","cppBubbleSort","cppInsertionSort","cppMergeSort","cppQuickSort","cppSelectionSort","javaBubbleSort","javaInsertionSort","javaMergeSort","javaQuickSort","javaSelectionSort","pythonBubbleSort","pythonInsertionSort","pythonMergeSort","pythonQuickSort","pythonSelectionSort"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCC,aADgC,GAChB,oCAChB,wBADgB,GAEhB,IAFgB,GAGhB,+BAHgB,GAIhB,KAJgB,GAKhB,oBALgB,GAMhB,eANgB,GAOhB,gBAPgB,GAQhB,KARgB,GAShB,IATgB,GAUhB,qCAVgB,GAWhB,KAXgB,GAYhB,cAZgB,GAahB,+BAbgB,GAchB,KAdgB,GAehB,gCAfgB,GAgBhB,4BAhBgB,GAiBhB,gCAjBgB,GAkBhB,KAlBgB,GAmBhB,IAnBgB,GAoBhB,wCApBgB,GAqBhB,KArBgB,GAsBhB,8CAtBgB,GAuBhB,WAvBgB,GAwBhB,+BAxBgB,GAyBhB,4BAzBgB,GA0BhB,kBA1BgB,GA2BhB,KA3BgB,GA4BhB,IA5BgB,GA6BhB,cA7BgB,GA8BhB,KA9BgB,GA+BhB,qBA/BgB,GAgChB,oCAhCgB,GAiChB,+BAjCgB,GAkChB,kDAlCgB,GAmChB,oCAnCgB,GAoChB,4BApCgB,GAqChB,SArCgB,GAsChB,6CAtCgB,GAuChB,SAvCgB,GAwChB,kDAxCgB,GAyChB,6CAzCgB,GA0ChB,YA1CgB,GA2ChB,IA3CgB,GA4ChB,8BA5CgB,GA6ChB,mBA7CgB,GA8ChB,mCA9CgB,GA+ChB,SA/CgB,GAgDhB,uCAhDgB,GAiDhB,SAjDgB,GAkDhB,IAlDgB,GAmDhB,iDAnDgB,GAoDhB,2CApDgB,GAqDhB,wBArDgB,GAsDhB,iCAtDgB,GAuDhB,wBAvDgB,GAwDhB,2DAxDgB,GAyDhB,6BAzDgB,GA0DhB,SA1DgB,GA2DhB,mDA3DgB,GA4DhB,aA5DgB,GA6DhB,6CA7DgB,GA8DhB,aA9DgB,GA+DhB,2BA/DgB,GAgEhB,SAhEgB,GAiEhB,YAjEgB,GAkEhB,0CAlEgB,GAmEhB,cAnEgB,GAoEhB,KApEgB,GAqEhB,GAtEgC;AAAA,SAuEhCC,gBAvEgC,GAuEb,qBAvEa;AAAA,SAwEhCC,YAxEgC,GAwEjB,iBAxEiB;AAAA,SAyEhCC,YAzEgC,GAyEjB,iBAzEiB;AAAA,SA0EhCC,gBA1EgC,GA0Eb,qBA1Ea;AAAA,SA4EhCC,cA5EgC,GA4Ef,iBA5Ee;AAAA,SA6EhCC,iBA7EgC,GA6EZ,oBA7EY;AAAA,SA8EhCC,aA9EgC,GA8EhB,gBA9EgB;AAAA,SA+EhCC,aA/EgC,GA+EhB,gBA/EgB;AAAA,SAgFhCC,iBAhFgC,GAgFZ,oBAhFY;AAAA,SAkFhCC,gBAlFgC,GAkFb,mBAlFa;AAAA,SAmFhCC,mBAnFgC,GAmFV,sBAnFU;AAAA,SAoFhCC,eApFgC,GAoFd,kBApFc;AAAA,SAqFhCC,eArFgC,GAqFd,kBArFc;AAAA,SAsFhCC,mBAtFgC,GAsFV,sBAtFU;AAAA;;AAAA;;AAyFpC,eAAehB,KAAf","sourcesContent":["import React from 'react'\r\n\r\nclass Codes extends React.Component {\r\n    cppBubbleSort = '#include <bits/stdc++.h> <br>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int *xp, int *yp)\\n'+\r\n    '{\\n'+\r\n    '\tint temp = *xp;\\n'+\r\n    '\t*xp = *yp;\\n'+\r\n    '\t*yp = temp;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void bubbleSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, j;\\n'+\r\n    '\tfor (i = 0; i < n-1; i++)\t\\n'+\r\n    '\t\\n'+\r\n    '\tfor (j = 0; j < n-i-1; j++)\\n'+\r\n    '\t\tif (arr[j] > arr[j+1])\\n'+\r\n    '\t\t\tswap(&arr[j], &arr[j+1]);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Bubble-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {64, 34, 25, 12, 22, 11, 90};\\n'+\r\n    '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n'+\r\n    '\tbubbleSort(arr, n);\\n'+\r\n    '\t// cout<<\"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '    ofstream myfile(\"test-case-1-bubble-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    ';';\r\n    cppInsertionSort = 'cpp \\ninsertionsort';\r\n    cppMergeSort = 'cpp \\nmergesort';\r\n    cppQuickSort = 'cpp \\nquicksort';\r\n    cppSelectionSort = 'cpp \\nselectionsort';\r\n\r\n    javaBubbleSort = 'java bubblesort';\r\n    javaInsertionSort = 'java insertionsort';\r\n    javaMergeSort = 'java mergesort';\r\n    javaQuickSort = 'java quicksort';\r\n    javaSelectionSort = 'java selectionsort';\r\n\r\n    pythonBubbleSort = 'python bubblesort';\r\n    pythonInsertionSort = 'python insertionsort';\r\n    pythonMergeSort = 'python mergesort';\r\n    pythonQuickSort = 'python quicksort';\r\n    pythonSelectionSort = 'python selectionsort';\r\n}\r\n\r\nexport default Codes"]},"metadata":{},"sourceType":"module"}