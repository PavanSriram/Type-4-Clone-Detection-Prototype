{"ast":null,"code":"import React from 'react';\n\nclass Codes extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.cppBubbleSort = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void swap(int *xp, int *yp)\\n' + '{\\n' + '\tint temp = *xp;\\n' + '\t*xp = *yp;\\n' + '\t*yp = temp;\\n' + '}\\n' + '\\n' + 'void bubbleSort(int arr[], int n)\\n' + '{\\n' + '\tint i, j;\\n' + '\tfor (i = 0; i < n-1; i++)\t\\n' + '\t\\n' + '\tfor (j = 0; j < n-i-1; j++)\\n' + '\t\tif (arr[j] > arr[j+1])\\n' + '\t\t\tswap(&arr[j], &arr[j+1]);\\n' + '}\\n' + '\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '    cout << \"Bubble-sort output:\" << endl;\\n' + '\tint i;\\n' + '\tfor (i = 0; i < size; i++)\\n' + '\t\tcout << arr[i] << \" \";\\n' + '\tcout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = {64, 34, 25, 12, 22, 11, 90};\\n' + '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n' + '\tbubbleSort(arr, n);\\n' + '\t// cout<<\"Sorted array: \\n\";\\n' + '\tprintArray(arr, n);\\n' + '    ofstream myfile(\"test-case-1-bubble-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\treturn 0;\\n' + '}\\n' + ';';\n    this.cppInsertionSort = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void insertionSort(int arr[], int n)\\n' + '{\\n' + '\tint i, key, j;\\n' + '\tfor (i = 1; i < n; i++)\\n' + '\t{\\n' + '\t\tkey = arr[i];\\n' + '\t\tj = i - 1;\\n' + '\\n' + '\t\twhile (j >= 0 && arr[j] > key)\\n' + '\t\t{\\n' + '\t\t\tarr[j + 1] = arr[j];\\n' + '\t\t\tj = j - 1;\\n' + '\t\t}\\n' + '\t\tarr[j + 1] = key;\\n' + '\t}\\n' + '}\\n' + '\\n' + 'void printArray(int arr[], int n)\\n' + '{\\n' + '    cout << \"Insertion-sort output:\" << endl;\\n' + '\tint i;\\n' + '\tfor (i = 0; i < n; i++)\\n' + '\t\tcout << arr[i] << \" \";\\n' + '\tcout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = { 12, 11, 13, 5, 6 };\\n' + '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n' + '\\n' + '\tinsertionSort(arr, n);\\n' + '\tprintArray(arr, n);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-insertion-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '\treturn 0;\\n' + '}';\n    this.cppMergeSort = '// C++ program for Merge Sort\\n' + '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + '// Merges two subarrays of array[].\\n' + '// First subarray is arr[begin..mid]\\n' + '// Second subarray is arr[mid+1..end]\\n' + 'void merge(int array[], int const left, int const mid, int const right)\\n' + '{\\n' + '    auto const subArrayOne = mid - left + 1;\\n' + '    auto const subArrayTwo = right - mid;\\n' + '\\n' + '    // Create temp arrays\\n' + '    auto *leftArray = new int[subArrayOne],\\n' + '         *rightArray = new int[subArrayTwo];\\n' + '\\n' + '    // Copy data to temp arrays leftArray[] and rightArray[]\\n' + '    for (auto i = 0; i < subArrayOne; i++)\\n' + '        leftArray[i] = array[left + i];\\n' + '    for (auto j = 0; j < subArrayTwo; j++)\\n' + '        rightArray[j] = array[mid + 1 + j];\\n' + '\\n' + '    auto indexOfSubArrayOne = 0,   // Initial index of first sub-array\\n' + '        indexOfSubArrayTwo = 0;    // Initial index of second sub-array\\n' + '    int indexOfMergedArray = left; // Initial index of merged array\\n' + '\\n' + '    // Merge the temp arrays back into array[left..right]\\n' + '    while (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo)\\n' + '    {\\n' + '        if (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo])\\n' + '        {\\n' + '            array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n' + '            indexOfSubArrayOne++;\\n' + '        }\\n' + '        else\\n' + '        {\\n' + '            array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n' + '            indexOfSubArrayTwo++;\\n' + '        }\\n' + '        indexOfMergedArray++;\\n' + '    }\\n' + '    // Copy the remaining elements of\\n' + '    // left[], if there are any\\n' + '    while (indexOfSubArrayOne < subArrayOne)\\n' + '    {\\n' + '        array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n' + '        indexOfSubArrayOne++;\\n' + '        indexOfMergedArray++;\\n' + '    }\\n' + '    // Copy the remaining elements of\\n' + '    // right[], if there are any\\n' + '    while (indexOfSubArrayTwo < subArrayTwo)\\n' + '    {\\n' + '        array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n' + '        indexOfSubArrayTwo++;\\n' + '        indexOfMergedArray++;\\n' + '    }\\n' + '}\\n' + '\\n' + '// begin is for left index and end is\\n' + '// right index of the sub-array\\n' + '// of arr to be sorted */\\n' + 'void mergeSort(int array[], int const begin, int const end)\\n' + '{\\n' + '    if (begin >= end)\\n' + '        return; // Returns recursively\\n' + '\\n' + '    auto mid = begin + (end - begin) / 2;\\n' + '    mergeSort(array, begin, mid);\\n' + '    mergeSort(array, mid + 1, end);\\n' + '    merge(array, begin, mid, end);\\n' + '}\\n' + '\\n' + '// UTILITY FUNCTIONS\\n' + '// Function to print an array\\n' + 'void printArray(int A[], int size)\\n' + '{\\n' + '    cout << \"Merge-sort output:\" << endl;\\n' + '    for (auto i = 0; i < size; i++)\\n' + '        cout << A[i] << \" \";\\n' + '    cout << endl;\\n' + '}\\n' + '\\n' + '// Driver code\\n' + 'int main()\\n' + '{\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '    // for(int i=0; i<n; i++){\\n' + '    //     cout << arr[i] << endl;\\n' + '    // }\\n' + '\\n' + '    // int arr[] = { 12, 11, 13, 5, 6, 7 };\\n' + '    auto arr_size = n;\\n' + '\\n' + '    // cout << \"Given array is \\n\";\\n' + '    // printArray(arr, arr_size);\\n' + '\\n' + '    mergeSort(arr, 0, arr_size - 1);\\n' + '\\n' + '    // cout << \"\\nSorted array is \\n\";\\n' + '    printArray(arr, arr_size);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-merge-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '    return 0;\\n' + '}\\n' + '';\n    this.cppQuickSort = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void swap(int* a, int* b)\\n' + '{\\n' + '\tint t = *a;\\n' + '\t*a = *b;\\n' + '\t*b = t;\\n' + '}\\n' + '\\n' + 'int partition (int arr[], int low, int high)\\n' + '{\\n' + '\tint pivot = arr[high]; // pivot\\n' + '\tint i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far\\n' + '\\n' + '\tfor (int j = low; j <= high - 1; j++)\\n' + '\t{\\n' + '\t\tif (arr[j] < pivot)\\n' + '\t\t{\\n' + '\t\t\ti++; // increment index of smaller element\\n' + '\t\t\tswap(&arr[i], &arr[j]);\\n' + '\t\t}\\n' + '\t}\\n' + '\tswap(&arr[i + 1], &arr[high]);\\n' + '\treturn (i + 1);\\n' + '}\\n' + '\\n' + 'void quickSort(int arr[], int low, int high)\\n' + '{\\n' + '\tif (low < high)\\n' + '\t{\\n' + '\t\tint pi = partition(arr, low, high);\\n' + '\\n' + '\t\tquickSort(arr, low, pi - 1);\\n' + '\t\tquickSort(arr, pi + 1, high);\\n' + '\t}\\n' + '}\\n' + '\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '\tcout << \"Quick-sort output:\" << endl;\\n' + '\tint i;\\n' + '\tfor (i = 0; i < size; i++)\\n' + '\t\tcout << arr[i] << \" \";\\n' + '\tcout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '    \\n' + '\t// int arr[] = {10, 7, 8, 9, 1, 5};\\n' + '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n' + '\tquickSort(arr, 0, n - 1);\\n' + '\t// cout << \"Sorted array: \\n\";\\n' + '\tprintArray(arr, n);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-quick-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '\treturn 0;\\n' + '}';\n    this.cppSelectionSort = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void swap(int *xp, int *yp)\\n' + '{\\n' + '\tint temp = *xp;\\n' + '\t*xp = *yp;\\n' + '\t*yp = temp;\\n' + '}\\n' + '\\n' + 'void selectionSort(int arr[], int n)\\n' + '{\\n' + '\tint i, j, min_idx;\\n' + '\\n' + '\tfor (i = 0; i < n-1; i++)\\n' + '\t{\\n' + '\t\tmin_idx = i;\\n' + '\t\tfor (j = i+1; j < n; j++)\\n' + '\t\tif (arr[j] < arr[min_idx])\\n' + '\t\t\tmin_idx = j;\\n' + '\\n' + '\t\tswap(&arr[min_idx], &arr[i]);\\n' + '\t}\\n' + '}\\n' + '\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '    cout << \"Selection-sort output:\" << endl;\\n' + '\tint i;\\n' + '\tfor (i=0; i < size; i++)\\n' + '\t\tcout << arr[i] << \" \";\\n' + '\tcout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"./test-cases/test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = {64, 25, 12, 22, 11};\\n' + '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n' + '\tselectionSort(arr, n);\\n' + '\t// cout << \"Sorted array: \\n\";\\n' + '\tprintArray(arr, n);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-selection-sort-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '\treturn 0;\\n' + '}';\n    this.cppReverseArray = '#include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void rvereseArray(int arr[], int start, int end)\\n' + '{\\n' + '\twhile (start < end)\\n' + '\t{\\n' + '\t\tint temp = arr[start];\\n' + '\t\tarr[start] = arr[end];\\n' + '\t\tarr[end] = temp;\\n' + '\t\tstart++;\\n' + '\t\tend--;\\n' + '\t}\\n' + '}\t\\n' + '\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + 'for (int i = 0; i < size; i++)\\n' + 'cout << arr[i] << \" \";\\n' + '\\n' + 'cout << endl;\\n' + '}\\n' + '\\n' + 'int main()\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    filename = \"test-case-1.txt\";\\n' + '    file.open(filename.c_str());\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = {1, 2, 3, 4, 5, 6};\\n' + '\t\\n' + '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n' + '\\n' + '\t// printArray(arr, n);\\n' + '\t\\n' + '\trvereseArray(arr, 0, n-1);\\n' + '\t\\n' + '\t// cout << \"Reversed array is\" << endl;\\n' + '\t\\n' + '\t// printArray(arr, n);\\n' + '\\n' + '    ofstream myfile(\"test-case-1-reverse-array-cpp.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\t\\n' + '\treturn 0;\\n' + '}\\n' + '';\n    this.cppCyclicArray = '# include <bits/stdc++.h>\\n' + 'using namespace std;\\n' + '\\n' + 'void rotate(int arr[], int n)\\n' + '{\\n' + '\tint x = arr[n - 1], i;\\n' + '\tfor (i = n - 1; i > 0; i--)\\n' + '\tarr[i] = arr[i - 1];\\n' + '\tarr[0] = x;\\n' + '}\\n' + '\\n' + 'int main(int argc, char** argv)\\n' + '{\\n' + '\\n' + '    fstream file;\\n' + '    string word, t, q, filename;\\n' + '    vector<int> fileInputs;\\n' + '    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n' + '    strcat(str1, argv[1]);\\n' + '    printf(\"Filepath: %s\\n\", str1);\\n' + '    // filename = \"../test-case-analysis-prototype/\"+argv[1];\\n' + '    file.open(str1);\\n' + '    while (file >> word)\\n' + '    {\\n' + '        fileInputs.push_back(stoi(word));\\n' + '    }\\n' + '    // for(int i=0; i<fileInputs.size(); i++){\\n' + '    //     cout << fileInputs[i] << endl;\\n' + '    // }\\n' + '\\n' + '    int n = fileInputs[0];\\n' + '    int arr[n];\\n' + '    for (int i = 0; i < n; i++)\\n' + '    {\\n' + '        arr[i] = fileInputs[i + 1];\\n' + '    }\\n' + '\\n' + '\t// int arr[] = {1, 2, 3, 4, 5}, i;\\n' + '\t// int n = sizeof(arr) /\\n' + '\t// \t\tsizeof(arr[0]);\\n' + '\\n' + '\t// cout << \"Given array is \\n\";\\n' + '\t// for (i = 0; i < n; i++)\\n' + '\t// \tcout << arr[i] << \\' \\';\\n' + '\\n' + '\trotate(arr, n);\\n' + '\\n' + '\t// cout << \"\\nRotated array is\\n\";\\n' + '\t// for (i = 0; i < n; i++)\\n' + '\t// \tcout << arr[i] << \\' \\';\\n' + '    fstream myfile;\\n' + '    myfile.open(\"../test-case-analysis-prototype/output.txt\");\\n' + '    if (myfile.is_open())\\n' + '    {\\n' + '        for (int count = 0; count < n; count++)\\n' + '        {\\n' + '            myfile << arr[count] << endl;\\n' + '        }\\n' + '        myfile.close();\\n' + '    }\\n' + '    else\\n' + '        cout << \"Unable to open file\";\\n' + '\\n' + '\treturn 0;\\n' + '}';\n    this.cBubbleSort = '// C program to implement\\n' + '// the above approach\\n' + '#include <stdio.h>\\n' + '#include <stdlib.h>\\n' + '#include <string.h>\\n' + '\\n' + 'void swap(int* xp, int* yp)\\n' + '{\\n' + '    int temp = *xp;\\n' + '    *xp = *yp;\\n' + '    *yp = temp;\\n' + '}\\n' + ' \\n' + '// A function to implement bubble sort\\n' + 'void bubbleSort(int arr[], int n)\\n' + '{\\n' + '    int i, j;\\n' + '    for (i = 0; i < n - 1; i++)\\n' + ' \\n' + '        // Last i elements are already in place\\n' + '        for (j = 0; j < n - i - 1; j++)\\n' + '            if (arr[j] > arr[j + 1])\\n' + '                swap(&arr[j], &arr[j + 1]);\\n' + '}\\n' + '\\n' + ' \\n' + '/* Utility that prints out an array on a line */\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '  int i;\\n' + '  for (i=0; i < size; i++)\\n' + '    printf(\"%d \", arr[i]);\\n' + ' \\n' + '  printf(\"\\n\");\\n' + '}\\n' + '\\n' + '// Driver code\\n' + 'int main(int argc, char* argv[])\\n' + '{\\n' + '\tFILE* ptr;\\n' + '\tchar ch;\\n' + '\\n' + '\t// Opening file in reading mode\\n' + '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n' + '    strcat(str1, argv[1]);\\n' + '    printf(\"fileCPath: %s\\n\", str1);\\n' + '\tptr = fopen(str1, \"r\");\\n' + '\\n' + '\tif (NULL == ptr) {\\n' + '\t\tprintf(\"file cant be opened \\n\");\\n' + '\t}\\n' + '\\n' + '\t// printf(\"content of this file are \\n\");\\n' + '\\n' + '\t// Printing what is written in file\\n' + '\t// character by character using loop.\\n' + '    char temp[101];\\n' + '    int idx = 0;\\n' + '    int arr_copy[101];\\n' + '    int arr_copy_idx = 0;\\n' + '\tdo {\\n' + '        char temp1[10] = \"\";\\n' + '        int idx1 = 0;\\n' + '\t\tch = fgetc(ptr);\\n' + '        if(ch==\\'\\\\n\\'){\\n' + '            for(int i=0; i<idx; i++){\\n' + '                temp1[idx1++] = temp[i];\\n' + '            }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '        }\\n' + '        else{\\n' + '            temp[idx++] = ch;\\n' + '        }\\n' + '\t} while (ch != EOF);\\n' + '\\n' + '    char temp1[10] = \"\";\\n' + '    int idx1 = 0;\\n' + '    for(int i=0; i<idx; i++){\\n' + '        for(int i=0; i<idx; i++){\\n' + '            temp1[idx1++] = temp[i];\\n' + '        }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '    }\\n' + '    // printf(\"\\n\");\\n' + '\\n' + '\t// Closing the file\\n' + '\tfclose(ptr);\\n' + '\\n' + '\\n' + '    int n = arr_copy[0];\\n' + '    int arr[n];\\n' + '    for(int i=1; i<=n; i++){\\n' + '        arr[i-1] = arr_copy[i];\\n' + '    }\\n' + '\\n' + '    // for(int i=0; i<=n; i++){\\n' + '    //     printf(\"%d \",arr_copy[i]);\\n' + '    // }\\n' + '\\n' + '    bubbleSort(arr, n);\\n' + '    // printf(\"Reversed array is \\n\");\\n' + '    // printArray(arr, n);\\n' + '\\n' + '\\n' + '\\n' + '   FILE *fptr;\\n' + '\\n' + '   // use appropriate location if you are using MacOS or Linux\\n' + '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n' + '\\n' + '   if(fptr == NULL)\\n' + '   {\\n' + '      printf(\"Error!\");   \\n' + '      exit(1);             \\n' + '   }\\n' + '\\n' + '//    fprintf(fptr,\"%d\",num);\\n' + '   for(int i=0; i<n; i++){\\n' + '       fprintf(fptr,\"%d\\n\",arr[i]);\\n' + '   }\\n' + '   fclose(fptr);\\n' + '\\n' + '\treturn 0;\\n' + '}\\n' + '';\n    this.cInsertionSort = '// C program to implement\\n' + '// the above approach\\n' + '#include <stdio.h>\\n' + '#include <stdlib.h>\\n' + '#include <string.h>\\n' + '\\n' + 'void insertionSort(int arr[], int n)\\n' + '{\\n' + '    int i, key, j;\\n' + '    for (i = 1; i < n; i++) {\\n' + '        key = arr[i];\\n' + '        j = i - 1;\\n' + ' \\n' + '        /* Move elements of arr[0..i-1], that are\\n' + '          greater than key, to one position ahead\\n' + '          of their current position */\\n' + '        while (j >= 0 && arr[j] > key) {\\n' + '            arr[j + 1] = arr[j];\\n' + '            j = j - 1;\\n' + '        }\\n' + '        arr[j + 1] = key;\\n' + '    }\\n' + '} \\n' + ' \\n' + '/* Utility that prints out an array on a line */\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '  int i;\\n' + '  for (i=0; i < size; i++)\\n' + '    printf(\"%d \", arr[i]);\\n' + ' \\n' + '  printf(\"\\n\");\\n' + '}\\n' + '\\n' + '// Driver code\\n' + 'int main(int argc, char* argv[])\\n' + '{\\n' + '\tFILE* ptr;\\n' + '\tchar ch;\\n' + '\\n' + '\t// Opening file in reading mode\\n' + '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n' + '    strcat(str1, argv[1]);\\n' + '    printf(\"fileCPath: %s\\n\", str1);\\n' + '\tptr = fopen(str1, \"r\");\\n' + '\\n' + '\tif (NULL == ptr) {\\n' + '\t\tprintf(\"file cant be opened \\n\");\\n' + '\t}\\n' + '\\n' + '\t// printf(\"content of this file are \\n\");\\n' + '\\n' + '\t// Printing what is written in file\\n' + '\t// character by character using loop.\\n' + '    char temp[101];\\n' + '    int idx = 0;\\n' + '    int arr_copy[101];\\n' + '    int arr_copy_idx = 0;\\n' + '\tdo {\\n' + '        char temp1[10] = \"\";\\n' + '        int idx1 = 0;\\n' + '\t\tch = fgetc(ptr);\\n' + '        if(ch==\\'\\\\n\\'){\\n' + '            for(int i=0; i<idx; i++){\\n' + '                temp1[idx1++] = temp[i];\\n' + '            }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '        }\\n' + '        else{\\n' + '            temp[idx++] = ch;\\n' + '        }\\n' + '\t} while (ch != EOF);\\n' + '\\n' + '    char temp1[10] = \"\";\\n' + '    int idx1 = 0;\\n' + '    for(int i=0; i<idx; i++){\\n' + '        for(int i=0; i<idx; i++){\\n' + '            temp1[idx1++] = temp[i];\\n' + '        }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '    }\\n' + '    // printf(\"\\n\");\\n' + '\\n' + '\t// Closing the file\\n' + '\tfclose(ptr);\\n' + '\\n' + '\\n' + '    int n = arr_copy[0];\\n' + '    int arr[n];\\n' + '    for(int i=1; i<=n; i++){\\n' + '        arr[i-1] = arr_copy[i];\\n' + '    }\\n' + '\\n' + '    // for(int i=0; i<=n; i++){\\n' + '    //     printf(\"%d \",arr_copy[i]);\\n' + '    // }\\n' + '\\n' + '    insertionSort(arr, n);\\n' + '    // printf(\"Reversed array is \\n\");\\n' + '    // printArray(arr, n);\\n' + '\\n' + '\\n' + '\\n' + '   FILE *fptr;\\n' + '\\n' + '   // use appropriate location if you are using MacOS or Linux\\n' + '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n' + '\\n' + '   if(fptr == NULL)\\n' + '   {\\n' + '      printf(\"Error!\");   \\n' + '      exit(1);             \\n' + '   }\\n' + '\\n' + '//    fprintf(fptr,\"%d\",num);\\n' + '   for(int i=0; i<n; i++){\\n' + '       fprintf(fptr,\" %d\\n\",arr[i]);\\n' + '   }\\n' + '   fclose(fptr);\\n' + '\\n' + '\treturn 0;\\n' + '}\\n' + '';\n    this.cMergeSort = '// C program to implement\\n' + '// the above approach\\n' + '#include <stdio.h>\\n' + '#include <stdlib.h>\\n' + '#include <string.h>\\n' + '\\n' + 'void merge(int arr[], int l, int m, int r)\\n' + '{\\n' + '    int i, j, k;\\n' + '    int n1 = m - l + 1;\\n' + '    int n2 = r - m;\\n' + '  \\n' + '    /* create temp arrays */\\n' + '    int L[n1], R[n2];\\n' + '  \\n' + '    /* Copy data to temp arrays L[] and R[] */\\n' + '    for (i = 0; i < n1; i++)\\n' + '        L[i] = arr[l + i];\\n' + '    for (j = 0; j < n2; j++)\\n' + '        R[j] = arr[m + 1 + j];\\n' + '  \\n' + '    /* Merge the temp arrays back into arr[l..r]*/\\n' + '    i = 0; // Initial index of first subarray\\n' + '    j = 0; // Initial index of second subarray\\n' + '    k = l; // Initial index of merged subarray\\n' + '    while (i < n1 && j < n2) {\\n' + '        if (L[i] <= R[j]) {\\n' + '            arr[k] = L[i];\\n' + '            i++;\\n' + '        }\\n' + '        else {\\n' + '            arr[k] = R[j];\\n' + '            j++;\\n' + '        }\\n' + '        k++;\\n' + '    }\\n' + '  \\n' + '    /* Copy the remaining elements of L[], if there\\n' + '    are any */\\n' + '    while (i < n1) {\\n' + '        arr[k] = L[i];\\n' + '        i++;\\n' + '        k++;\\n' + '    }\\n' + '  \\n' + '    /* Copy the remaining elements of R[], if there\\n' + '    are any */\\n' + '    while (j < n2) {\\n' + '        arr[k] = R[j];\\n' + '        j++;\\n' + '        k++;\\n' + '    }\\n' + '}\\n' + '  \\n' + '/* l is for left index and r is right index of the\\n' + 'sub-array of arr to be sorted */\\n' + 'void mergeSort(int arr[], int l, int r)\\n' + '{\\n' + '    if (l < r) {\\n' + '        // Same as (l+r)/2, but avoids overflow for\\n' + '        // large l and h\\n' + '        int m = l + (r - l) / 2;\\n' + '  \\n' + '        // Sort first and second halves\\n' + '        mergeSort(arr, l, m);\\n' + '        mergeSort(arr, m + 1, r);\\n' + '  \\n' + '        merge(arr, l, m, r);\\n' + '    }\\n' + '}\\n' + '\\n' + ' \\n' + '/* Utility that prints out an array on a line */\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '  int i;\\n' + '  for (i=0; i < size; i++)\\n' + '    printf(\"%d \", arr[i]);\\n' + ' \\n' + '  printf(\"\\n\");\\n' + '}\\n' + '\\n' + '// Driver code\\n' + 'int main(int argc, char* argv[])\\n' + '{\\n' + '\tFILE* ptr;\\n' + '\tchar ch;\\n' + '\\n' + '\t// Opening file in reading mode\\n' + '    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n' + '    strcat(str1, argv[1]);\\n' + '    printf(\"fileCPath: %s\\n\", str1);\\n' + '\tptr = fopen(str1, \"r\");\\n' + '\\n' + '\tif (NULL == ptr) {\\n' + '\t\tprintf(\"file cant be opened \\n\");\\n' + '\t}\\n' + '\\n' + '\t// printf(\"content of this file are \\n\");\\n' + '\\n' + '\t// Printing what is written in file\\n' + '\t// character by character using loop.\\n' + '    char temp[101];\\n' + '    int idx = 0;\\n' + '    int arr_copy[101];\\n' + '    int arr_copy_idx = 0;\\n' + '\tdo {\\n' + '        char temp1[10] = \"\";\\n' + '        int idx1 = 0;\\n' + '\t\tch = fgetc(ptr);\\n' + '        if(ch==\\'\\\\n\\'){\\n' + '            for(int i=0; i<idx; i++){\\n' + '                temp1[idx1++] = temp[i];\\n' + '            }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '        }\\n' + '        else{\\n' + '            temp[idx++] = ch;\\n' + '        }\\n' + '\t} while (ch != EOF);\\n' + '\\n' + '    char temp1[10] = \"\";\\n' + '    int idx1 = 0;\\n' + '    for(int i=0; i<idx; i++){\\n' + '        for(int i=0; i<idx; i++){\\n' + '            temp1[idx1++] = temp[i];\\n' + '        }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '    }\\n' + '    // printf(\"\\n\");\\n' + '\\n' + '\t// Closing the file\\n' + '\tfclose(ptr);\\n' + '\\n' + '\\n' + '    int n = arr_copy[0];\\n' + '    int arr[n];\\n' + '    for(int i=1; i<=n; i++){\\n' + '        arr[i-1] = arr_copy[i];\\n' + '    }\\n' + '\\n' + '    // for(int i=0; i<=n; i++){\\n' + '    //     printf(\"%d \",arr_copy[i]);\\n' + '    // }\\n' + '\\n' + '    mergeSort(arr, 0, n - 1);\\n' + '    // printf(\"Reversed array is \\n\");\\n' + '    // printArray(arr, n);\\n' + '\\n' + '\\n' + '\\n' + '   FILE *fptr;\\n' + '\\n' + '   // use appropriate location if you are using MacOS or Linux\\n' + '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n' + '\\n' + '   if(fptr == NULL)\\n' + '   {\\n' + '      printf(\"Error!\");   \\n' + '      exit(1);             \\n' + '   }\\n' + '\\n' + '//    fprintf(fptr,\"%d\",num);\\n' + '   for(int i=0; i<n; i++){\\n' + '       fprintf(fptr,\"%d\\n\",arr[i]);\\n' + '   }\\n' + '   fclose(fptr);\\n' + '\\n' + '\treturn 0;\\n' + '}\\n' + '';\n    this.cQuickSort = '// C program to implement\\n' + '// the above approach\\n' + '#include <stdio.h>\\n' + '#include <stdlib.h>\\n' + '#include <string.h>\\n' + '\\n' + 'void quicksort(int number[],int first,int last){\\n' + '   int i, j, pivot, temp;\\n' + '\\n' + '   if(first<last){\\n' + '      pivot=first;\\n' + '      i=first;\\n' + '      j=last;\\n' + '\\n' + '      while(i<j){\\n' + '         while(number[i]<=number[pivot]&&i<last)\\n' + '            i++;\\n' + '         while(number[j]>number[pivot])\\n' + '            j--;\\n' + '         if(i<j){\\n' + '            temp=number[i];\\n' + '            number[i]=number[j];\\n' + '            number[j]=temp;\\n' + '         }\\n' + '      }\\n' + '\\n' + '      temp=number[pivot];\\n' + '      number[pivot]=number[j];\\n' + '      number[j]=temp;\\n' + '      quicksort(number,first,j-1);\\n' + '      quicksort(number,j+1,last);\\n' + '\\n' + '   }\\n' + '}\\n' + '\\n' + ' \\n' + '/* Utility that prints out an array on a line */\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '  int i;\\n' + '  for (i=0; i < size; i++)\\n' + '    printf(\"%d \", arr[i]);\\n' + ' \\n' + '  printf(\"\\n\");\\n' + '}\\n' + '\\n' + '// Driver code\\n' + 'int main(int argc, char* argv[])\\n' + '{\\n' + '\tFILE* ptr;\\n' + '\tchar ch;\\n' + '\\n' + '\t// Opening file in reading mode\\n' + '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n' + '    strcat(str1, argv[1]);\\n' + '    printf(\"fileCPath: %s\\n\", str1);\\n' + '\tptr = fopen(str1, \"r\");\\n' + '\\n' + '\tif (NULL == ptr) {\\n' + '\t\tprintf(\"file cant be opened \\n\");\\n' + '\t}\\n' + '\\n' + '\t// printf(\"content of this file are \\n\");\\n' + '\\n' + '\t// Printing what is written in file\\n' + '\t// character by character using loop.\\n' + '    char temp[101];\\n' + '    int idx = 0;\\n' + '    int arr_copy[101];\\n' + '    int arr_copy_idx = 0;\\n' + '\tdo {\\n' + '        char temp1[10] = \"\";\\n' + '        int idx1 = 0;\\n' + '\t\tch = fgetc(ptr);\\n' + '        if(ch==\\'\\\\n\\'){\\n' + '            for(int i=0; i<idx; i++){\\n' + '                temp1[idx1++] = temp[i];\\n' + '            }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '        }\\n' + '        else{\\n' + '            temp[idx++] = ch;\\n' + '        }\\n' + '\t} while (ch != EOF);\\n' + '\\n' + '    char temp1[10] = \"\";\\n' + '    int idx1 = 0;\\n' + '    for(int i=0; i<idx; i++){\\n' + '        for(int i=0; i<idx; i++){\\n' + '            temp1[idx1++] = temp[i];\\n' + '        }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '    }\\n' + '    // printf(\"\\n\");\\n' + '\\n' + '\t// Closing the file\\n' + '\tfclose(ptr);\\n' + '\\n' + '\\n' + '    int n = arr_copy[0];\\n' + '    int arr[n];\\n' + '    for(int i=1; i<=n; i++){\\n' + '        arr[i-1] = arr_copy[i];\\n' + '    }\\n' + '\\n' + '    // for(int i=0; i<=n; i++){\\n' + '    //     printf(\"%d \",arr_copy[i]);\\n' + '    // }\\n' + '\\n' + '    quicksort(arr,0,n-1);\\n' + '    // printf(\"Reversed array is \\n\");\\n' + '    printArray(arr, n);\\n' + '\\n' + '\\n' + '\\n' + '   FILE *fptr;\\n' + '\\n' + '   // use appropriate location if you are using MacOS or Linux\\n' + '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n' + '\\n' + '   if(fptr == NULL)\\n' + '   {\\n' + '      printf(\"Error!\");   \\n' + '      exit(1);             \\n' + '   }\\n' + '\\n' + '//    fprintf(fptr,\"%d\",num);\\n' + '   for(int i=0; i<n; i++){\\n' + '       fprintf(fptr,\" %d\\n\",arr[i]);\\n' + '   }\\n' + '   fclose(fptr);\\n' + '\\n' + '\treturn 0;\\n' + '}\\n' + '';\n    this.cSelectionSort = '// C program to implement\\n' + '// the above approach\\n' + '#include <stdio.h>\\n' + '#include <stdlib.h>\\n' + '#include <string.h>\\n' + '\\n' + 'void swap(int *xp, int *yp)\\n' + '{\\n' + '    int temp = *xp;\\n' + '    *xp = *yp;\\n' + '    *yp = temp;\\n' + '}\\n' + '  \\n' + 'void selectionSort(int arr[], int n)\\n' + '{\\n' + '    int i, j, min_idx;\\n' + '  \\n' + '    // One by one move boundary of unsorted subarray\\n' + '    for (i = 0; i < n-1; i++)\\n' + '    {\\n' + '        // Find the minimum element in unsorted array\\n' + '        min_idx = i;\\n' + '        for (j = i+1; j < n; j++)\\n' + '          if (arr[j] < arr[min_idx])\\n' + '            min_idx = j;\\n' + '  \\n' + '        // Swap the found minimum element with the first element\\n' + '        swap(&arr[min_idx], &arr[i]);\\n' + '    }\\n' + '} \\n' + ' \\n' + '/* Utility that prints out an array on a line */\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '  int i;\\n' + '  for (i=0; i < size; i++)\\n' + '    printf(\"%d \", arr[i]);\\n' + ' \\n' + '  printf(\"\\n\");\\n' + '}\\n' + '\\n' + '// Driver code\\n' + 'int main(int argc, char* argv[])\\n' + '{\\n' + '\tFILE* ptr;\\n' + '\tchar ch;\\n' + '\\n' + '\t// Opening file in reading mode\\n' + '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n' + '    strcat(str1, argv[1]);\\n' + '    printf(\"fileCPath: %s\\n\", str1);\\n' + '\tptr = fopen(str1, \"r\");\\n' + '\\n' + '\tif (NULL == ptr) {\\n' + '\t\tprintf(\"file cant be opened \\n\");\\n' + '\t}\\n' + '\\n' + '\t// printf(\"content of this file are \\n\");\\n' + '\\n' + '\t// Printing what is written in file\\n' + '\t// character by character using loop.\\n' + '    char temp[101];\\n' + '    int idx = 0;\\n' + '    int arr_copy[101];\\n' + '    int arr_copy_idx = 0;\\n' + '\tdo {\\n' + '        char temp1[10] = \"\";\\n' + '        int idx1 = 0;\\n' + '\t\tch = fgetc(ptr);\\n' + '        if(ch==\\'\\\\n\\'){\\n' + '            for(int i=0; i<idx; i++){\\n' + '                temp1[idx1++] = temp[i];\\n' + '            }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '        }\\n' + '        else{\\n' + '            temp[idx++] = ch;\\n' + '        }\\n' + '\t} while (ch != EOF);\\n' + '\\n' + '    char temp1[10] = \"\";\\n' + '    int idx1 = 0;\\n' + '    for(int i=0; i<idx; i++){\\n' + '        for(int i=0; i<idx; i++){\\n' + '            temp1[idx1++] = temp[i];\\n' + '        }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '    }\\n' + '    // printf(\"\\n\");\\n' + '\\n' + '\t// Closing the file\\n' + '\tfclose(ptr);\\n' + '\\n' + '\\n' + '    int n = arr_copy[0];\\n' + '    int arr[n];\\n' + '    for(int i=1; i<=n; i++){\\n' + '        arr[i-1] = arr_copy[i];\\n' + '    }\\n' + '\\n' + '    // for(int i=0; i<=n; i++){\\n' + '    //     printf(\"%d \",arr_copy[i]);\\n' + '    // }\\n' + '\\n' + '    selectionSort(arr, n);\\n' + '    // printf(\"Reversed array is \\n\");\\n' + '    // printArray(arr, n);\\n' + '\\n' + '\\n' + '\\n' + '   FILE *fptr;\\n' + '\\n' + '   // use appropriate location if you are using MacOS or Linux\\n' + '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n' + '\\n' + '   if(fptr == NULL)\\n' + '   {\\n' + '      printf(\"Error!\");   \\n' + '      exit(1);             \\n' + '   }\\n' + '\\n' + '//    fprintf(fptr,\"%d\",num);\\n' + '   for(int i=0; i<n; i++){\\n' + '       fprintf(fptr,\" %d\\n\",arr[i]);\\n' + '   }\\n' + '   fclose(fptr);\\n' + '\\n' + '\treturn 0;\\n' + '}\\n' + '';\n    this.cReverseArray = '// C program to implement\\n' + '// the above approach\\n' + '#include <stdio.h>\\n' + '#include <stdlib.h>\\n' + '#include <string.h>\\n' + '\\n' + 'void rvereseArray(int arr[], int start, int end)\\n' + '{\\n' + '    int temp;\\n' + '    while (start < end)\\n' + '    {\\n' + '        temp = arr[start];  \\n' + '        arr[start] = arr[end];\\n' + '        arr[end] = temp;\\n' + '        start++;\\n' + '        end--;\\n' + '    }  \\n' + '}    \\n' + ' \\n' + '/* Utility that prints out an array on a line */\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '  int i;\\n' + '  for (i=0; i < size; i++)\\n' + '    printf(\"%d \", arr[i]);\\n' + ' \\n' + '  printf(\"\\n\");\\n' + '}\\n' + '\\n' + '// Driver code\\n' + 'int main(int argc, char* argv[])\\n' + '{\\n' + '\tFILE* ptr;\\n' + '\tchar ch;\\n' + '\\n' + '\t// Opening file in reading mode\\n' + '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n' + '    strcat(str1, argv[1]);\\n' + '    printf(\"fileCPath: %s\\n\", str1);\\n' + '\tptr = fopen(str1, \"r\");\\n' + '\\n' + '\tif (NULL == ptr) {\\n' + '\t\tprintf(\"file cant be opened \\n\");\\n' + '\t}\\n' + '\\n' + '\t// printf(\"content of this file are \\n\");\\n' + '\\n' + '\t// Printing what is written in file\\n' + '\t// character by character using loop.\\n' + '    char temp[101];\\n' + '    int idx = 0;\\n' + '    int arr_copy[101];\\n' + '    int arr_copy_idx = 0;\\n' + '\tdo {\\n' + '        char temp1[10] = \"\";\\n' + '        int idx1 = 0;\\n' + '\t\tch = fgetc(ptr);\\n' + '        if(ch==\\'\\\\n\\'){\\n' + '            for(int i=0; i<idx; i++){\\n' + '                temp1[idx1++] = temp[i];\\n' + '            }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '        }\\n' + '        else{\\n' + '            temp[idx++] = ch;\\n' + '        }\\n' + '\t} while (ch != EOF);\\n' + '\\n' + '    char temp1[10] = \"\";\\n' + '    int idx1 = 0;\\n' + '    for(int i=0; i<idx; i++){\\n' + '        for(int i=0; i<idx; i++){\\n' + '            temp1[idx1++] = temp[i];\\n' + '        }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '    }\\n' + '    // printf(\"\\n\");\\n' + '\\n' + '\t// Closing the file\\n' + '\tfclose(ptr);\\n' + '\\n' + '\\n' + '    int n = arr_copy[0];\\n' + '    int arr[n];\\n' + '    for(int i=1; i<=n; i++){\\n' + '        arr[i-1] = arr_copy[i];\\n' + '    }\\n' + '\\n' + '    // for(int i=0; i<=n; i++){\\n' + '    //     printf(\"%d \",arr_copy[i]);\\n' + '    // }\\n' + '\\n' + '    rvereseArray(arr, 0, n-1);\\n' + '    // printf(\"Reversed array is \\n\");\\n' + '    printArray(arr, n);\\n' + '\\n' + '\\n' + '\\n' + '   FILE *fptr;\\n' + '\\n' + '   // use appropriate location if you are using MacOS or Linux\\n' + '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n' + '\\n' + '   if(fptr == NULL)\\n' + '   {\\n' + '      printf(\"Error!\");   \\n' + '      exit(1);             \\n' + '   }\\n' + '\\n' + '//    fprintf(fptr,\"%d\",num);\\n' + '   for(int i=0; i<n; i++){\\n' + '       fprintf(fptr,\" %d\\n\",arr[i]);\\n' + '   }\\n' + '   fclose(fptr);\\n' + '\\n' + '\treturn 0;\\n' + '}\\n' + '';\n    this.cCyclicArray = '// C program to implement\\n' + '// the above approach\\n' + '#include <stdio.h>\\n' + '#include <stdlib.h>\\n' + '#include <string.h>\\n' + '\\n' + 'void rotate(int arr[], int n)\\n' + '{\\n' + '   int x = arr[n-1], i;\\n' + '   for (i = n-1; i > 0; i--)\\n' + '      arr[i] = arr[i-1];\\n' + '   arr[0] = x;\\n' + '}\\n' + ' \\n' + '/* Utility that prints out an array on a line */\\n' + 'void printArray(int arr[], int size)\\n' + '{\\n' + '  int i;\\n' + '  for (i=0; i < size; i++)\\n' + '    printf(\"%d \", arr[i]);\\n' + ' \\n' + '  printf(\"\\n\");\\n' + '}\\n' + '\\n' + '// Driver code\\n' + 'int main(int argc, char* argv[])\\n' + '{\\n' + '\tFILE* ptr;\\n' + '\tchar ch;\\n' + '\\n' + '\t// Opening file in reading mode\\n' + '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n' + '    strcat(str1, argv[1]);\\n' + '    printf(\"fileCPath: %s\\n\", str1);\\n' + '\tptr = fopen(str1, \"r\");\\n' + '\\n' + '\tif (NULL == ptr) {\\n' + '\t\tprintf(\"file cant be opened \\n\");\\n' + '\t}\\n' + '\\n' + '\t// printf(\"content of this file are \\n\");\\n' + '\\n' + '\t// Printing what is written in file\\n' + '\t// character by character using loop.\\n' + '    char temp[101];\\n' + '    int idx = 0;\\n' + '    int arr_copy[101];\\n' + '    int arr_copy_idx = 0;\\n' + '\tdo {\\n' + '        char temp1[10] = \"\";\\n' + '        int idx1 = 0;\\n' + '\t\tch = fgetc(ptr);\\n' + '        if(ch==\\'\\\\n\\'){\\n' + '            for(int i=0; i<idx; i++){\\n' + '                temp1[idx1++] = temp[i];\\n' + '            }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '        }\\n' + '        else{\\n' + '            temp[idx++] = ch;\\n' + '        }\\n' + '\t} while (ch != EOF);\\n' + '\\n' + '    char temp1[10] = \"\";\\n' + '    int idx1 = 0;\\n' + '    for(int i=0; i<idx; i++){\\n' + '        for(int i=0; i<idx; i++){\\n' + '            temp1[idx1++] = temp[i];\\n' + '        }\\n' + '            // printf(\"\\n\");\\n' + '            idx = 0;\\n' + '            // printf(\"%d\\n\",atoi(temp1));\\n' + '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n' + '    }\\n' + '    // printf(\"\\n\");\\n' + '\\n' + '\t// Closing the file\\n' + '\tfclose(ptr);\\n' + '\\n' + '\\n' + '    int n = arr_copy[0];\\n' + '    int arr[n];\\n' + '    for(int i=1; i<=n; i++){\\n' + '        arr[i-1] = arr_copy[i];\\n' + '    }\\n' + '\\n' + '    // for(int i=0; i<=n; i++){\\n' + '    //     printf(\"%d \",arr_copy[i]);\\n' + '    // }\\n' + '\\n' + '    rotate(arr, n);\\n' + '    // printf(\"Reversed array is \\n\");\\n' + '    printArray(arr, n);\\n' + '\\n' + '\\n' + '\\n' + '   FILE *fptr;\\n' + '\\n' + '   // use appropriate location if you are using MacOS or Linux\\n' + '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n' + '\\n' + '   if(fptr == NULL)\\n' + '   {\\n' + '      printf(\"Error!\");   \\n' + '      exit(1);             \\n' + '   }\\n' + '\\n' + '//    fprintf(fptr,\"%d\",num);\\n' + '   for(int i=0; i<n; i++){\\n' + '       fprintf(fptr,\" %d\\n\",arr[i]);\\n' + '   }\\n' + '   fclose(fptr);\\n' + '\\n' + '\treturn 0;\\n' + '}\\n' + '';\n    this.pyBubbleSort = 'import sys\\n' + '\\n' + 'def bubbleSort(arr, n):\\n' + ' \\n' + '    # Traverse through all array elements\\n' + '    for i in range(n):\\n' + ' \\n' + '        # Last i elements are already in place\\n' + '        for j in range(0, n-i-1):\\n' + ' \\n' + '            # traverse the array from 0 to n-i-1\\n' + '            # Swap if the element found is greater\\n' + '            # than the next element\\n' + '            if arr[j] > arr[j+1]:\\n' + '                arr[j], arr[j+1] = arr[j+1], arr[j]\\n' + '\\n' + '\\n' + 'arr = []\\n' + 'n = -1\\n' + 'flag = 0\\n' + 'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n' + 'Lines = file1.readlines()\\n' + 'for line in Lines:\\n' + '    curr_line = line.strip()\\n' + '    # print(curr_line)\\n' + '    converted_num = int(curr_line)\\n' + '    # print(converted_num)\\n' + '    if(flag==0):\\n' + '        flag = 1\\n' + '        n = converted_num\\n' + '    else:\\n' + '        arr.append(converted_num)\\n' + '\\n' + '#arr= [1, 2, 3, 4, 5]\\n' + '# n = len(arr)\\n' + '# print (\"Given array is\")\\n' + '# for i in range(0, n):\\n' + '# \tprint (arr[i], end = \\' \\')\\n' + '\\n' + 'bubbleSort(arr, n)\\n' + '\\n' + '# print (\"\\nRotated array is\")\\n' + '# for i in range(0, n):\\n' + '# \tprint (arr[i], end = \\' \\')\\n' + '\\n' + 'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n' + 'for i in range(0, n):\\n' + '\t# print (arr[i], end = \\' \\')\\n' + '    converted_arr_i = str(arr[i])\\n' + '    file1.writelines(converted_arr_i)\\n' + '    file1.writelines(\\'\\\\n\\')\\n' + '# file1.writelines(L)\\n' + 'file1.close()\\n' + '';\n    this.pyInsertionSort = 'import sys\\n' + '\\n' + 'def insertionSort(arr, n):\\n' + ' \\n' + '    # Traverse through 1 to len(arr)\\n' + '    for i in range(1, n):\\n' + ' \\n' + '        key = arr[i]\\n' + ' \\n' + '        # Move elements of arr[0..i-1], that are\\n' + '        # greater than key, to one position ahead\\n' + '        # of their current position\\n' + '        j = i-1\\n' + '        while j >= 0 and key < arr[j] :\\n' + '                arr[j + 1] = arr[j]\\n' + '                j -= 1\\n' + '        arr[j + 1] = key\\n' + '\\n' + '\\n' + 'arr = []\\n' + 'n = -1\\n' + 'flag = 0\\n' + 'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n' + 'Lines = file1.readlines()\\n' + 'for line in Lines:\\n' + '    curr_line = line.strip()\\n' + '    # print(curr_line)\\n' + '    converted_num = int(curr_line)\\n' + '    # print(converted_num)\\n' + '    if(flag==0):\\n' + '        flag = 1\\n' + '        n = converted_num\\n' + '    else:\\n' + '        arr.append(converted_num)\\n' + '\\n' + '#arr= [1, 2, 3, 4, 5]\\n' + '# n = len(arr)\\n' + '# print (\"Given array is\")\\n' + '# for i in range(0, n):\\n' + '# \tprint (arr[i], end = \\' \\')\\n' + '\\n' + 'insertionSort(arr, n)\\n' + '\\n' + '# print (\"\\nRotated array is\")\\n' + '# for i in range(0, n):\\n' + '# \tprint (arr[i], end = \\' \\')\\n' + '\\n' + 'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n' + 'for i in range(0, n):\\n' + '\t# print (arr[i], end = \\' \\')\\n' + '    converted_arr_i = str(arr[i])\\n' + '    file1.writelines(converted_arr_i)\\n' + '    file1.writelines(\\'\\\\n\\')\\n' + '# file1.writelines(L)\\n' + 'file1.close()\\n' + '';\n    this.pyMergeSort = 'python mergesort';\n    this.pyQuickSort = 'python quicksort';\n    this.pySelectionSort = 'python selectionsort';\n    this.pyCyclicArray = \"\";\n    this.pyReverseArray = 'def reverseList(A, start, end):\\n' + '\twhile start < end:\\n' + '\t\tA[start], A[end] = A[end], A[start]\\n' + '\t\tstart += 1\\n' + '\t\tend -= 1\\n' + '\\n' + 'arr = []\\n' + 'n = -1\\n' + 'flag = 0\\n' + 'file1 = open(\"test-case-1.txt\", \"r\")\\n' + 'Lines = file1.readlines()\\n' + 'for line in Lines:\\n' + '    curr_line = line.strip()\\n' + '    # print(curr_line)\\n' + '    converted_num = int(curr_line)\\n' + '    # print(converted_num)\\n' + '    if(flag==0):\\n' + '        flag = 1\\n' + '        n = converted_num\\n' + '    else:\\n' + '        arr.append(converted_num)\\n' + '\\n' + '# A = [1, 2, 3, 4, 5, 6]\\n' + '# print(A)\\n' + 'reverseList(arr, 0, n-1)\\n' + '# print(\"Reversed list is\")\\n' + '# print(A)\\n' + '\\n' + 'file1 = open(\"output.txt\", \"w\")\\n' + 'for i in range(0, n):\\n' + '\t# print (arr[i], end = \" \")\\n' + '    converted_arr_i = str(arr[i])\\n' + '    file1.writelines(converted_arr_i)\\n' + '    file1.writelines(\"\\n\")\\n' + '# file1.writelines(L)\\n' + 'file1.close()';\n  }\n\n}\n\nexport default Codes;","map":{"version":3,"sources":["C:/Users/pavan/OneDrive/Documents/GitHub/Type-4-Clone-Detection-Prototype/type_4/src/Codes.js"],"names":["React","Codes","Component","cppBubbleSort","cppInsertionSort","cppMergeSort","cppQuickSort","cppSelectionSort","cppReverseArray","cppCyclicArray","cBubbleSort","cInsertionSort","cMergeSort","cQuickSort","cSelectionSort","cReverseArray","cCyclicArray","pyBubbleSort","pyInsertionSort","pyMergeSort","pyQuickSort","pySelectionSort","pyCyclicArray","pyReverseArray"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nclass Codes extends React.Component {\r\n    cppBubbleSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int *xp, int *yp)\\n'+\r\n    '{\\n'+\r\n    '\tint temp = *xp;\\n'+\r\n    '\t*xp = *yp;\\n'+\r\n    '\t*yp = temp;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void bubbleSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, j;\\n'+\r\n    '\tfor (i = 0; i < n-1; i++)\t\\n'+\r\n    '\t\\n'+\r\n    '\tfor (j = 0; j < n-i-1; j++)\\n'+\r\n    '\t\tif (arr[j] > arr[j+1])\\n'+\r\n    '\t\t\tswap(&arr[j], &arr[j+1]);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Bubble-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {64, 34, 25, 12, 22, 11, 90};\\n'+\r\n    '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n'+\r\n    '\tbubbleSort(arr, n);\\n'+\r\n    '\t// cout<<\"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '    ofstream myfile(\"test-case-1-bubble-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    ';';\r\n    cppInsertionSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void insertionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, key, j;\\n'+\r\n    '\tfor (i = 1; i < n; i++)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tkey = arr[i];\\n'+\r\n    '\t\tj = i - 1;\\n'+\r\n    '\\n'+\r\n    '\t\twhile (j >= 0 && arr[j] > key)\\n'+\r\n    '\t\t{\\n'+\r\n    '\t\t\tarr[j + 1] = arr[j];\\n'+\r\n    '\t\t\tj = j - 1;\\n'+\r\n    '\t\t}\\n'+\r\n    '\t\tarr[j + 1] = key;\\n'+\r\n    '\t}\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Insertion-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < n; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = { 12, 11, 13, 5, 6 };\\n'+\r\n    '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+\r\n    '\\n'+\r\n    '\tinsertionSort(arr, n);\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-insertion-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n    cppMergeSort = '// C++ program for Merge Sort\\n'+\r\n    '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    '// Merges two subarrays of array[].\\n'+\r\n    '// First subarray is arr[begin..mid]\\n'+\r\n    '// Second subarray is arr[mid+1..end]\\n'+\r\n    'void merge(int array[], int const left, int const mid, int const right)\\n'+\r\n    '{\\n'+\r\n    '    auto const subArrayOne = mid - left + 1;\\n'+\r\n    '    auto const subArrayTwo = right - mid;\\n'+\r\n    '\\n'+\r\n    '    // Create temp arrays\\n'+\r\n    '    auto *leftArray = new int[subArrayOne],\\n'+\r\n    '         *rightArray = new int[subArrayTwo];\\n'+\r\n    '\\n'+\r\n    '    // Copy data to temp arrays leftArray[] and rightArray[]\\n'+\r\n    '    for (auto i = 0; i < subArrayOne; i++)\\n'+\r\n    '        leftArray[i] = array[left + i];\\n'+\r\n    '    for (auto j = 0; j < subArrayTwo; j++)\\n'+\r\n    '        rightArray[j] = array[mid + 1 + j];\\n'+\r\n    '\\n'+\r\n    '    auto indexOfSubArrayOne = 0,   // Initial index of first sub-array\\n'+\r\n    '        indexOfSubArrayTwo = 0;    // Initial index of second sub-array\\n'+\r\n    '    int indexOfMergedArray = left; // Initial index of merged array\\n'+\r\n    '\\n'+\r\n    '    // Merge the temp arrays back into array[left..right]\\n'+\r\n    '    while (indexOfSubArrayOne < subArrayOne && indexOfSubArrayTwo < subArrayTwo)\\n'+\r\n    '    {\\n'+\r\n    '        if (leftArray[indexOfSubArrayOne] <= rightArray[indexOfSubArrayTwo])\\n'+\r\n    '        {\\n'+\r\n    '            array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n'+\r\n    '            indexOfSubArrayOne++;\\n'+\r\n    '        }\\n'+\r\n    '        else\\n'+\r\n    '        {\\n'+\r\n    '            array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n'+\r\n    '            indexOfSubArrayTwo++;\\n'+\r\n    '        }\\n'+\r\n    '        indexOfMergedArray++;\\n'+\r\n    '    }\\n'+\r\n    '    // Copy the remaining elements of\\n'+\r\n    '    // left[], if there are any\\n'+\r\n    '    while (indexOfSubArrayOne < subArrayOne)\\n'+\r\n    '    {\\n'+\r\n    '        array[indexOfMergedArray] = leftArray[indexOfSubArrayOne];\\n'+\r\n    '        indexOfSubArrayOne++;\\n'+\r\n    '        indexOfMergedArray++;\\n'+\r\n    '    }\\n'+\r\n    '    // Copy the remaining elements of\\n'+\r\n    '    // right[], if there are any\\n'+\r\n    '    while (indexOfSubArrayTwo < subArrayTwo)\\n'+\r\n    '    {\\n'+\r\n    '        array[indexOfMergedArray] = rightArray[indexOfSubArrayTwo];\\n'+\r\n    '        indexOfSubArrayTwo++;\\n'+\r\n    '        indexOfMergedArray++;\\n'+\r\n    '    }\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// begin is for left index and end is\\n'+\r\n    '// right index of the sub-array\\n'+\r\n    '// of arr to be sorted */\\n'+\r\n    'void mergeSort(int array[], int const begin, int const end)\\n'+\r\n    '{\\n'+\r\n    '    if (begin >= end)\\n'+\r\n    '        return; // Returns recursively\\n'+\r\n    '\\n'+\r\n    '    auto mid = begin + (end - begin) / 2;\\n'+\r\n    '    mergeSort(array, begin, mid);\\n'+\r\n    '    mergeSort(array, mid + 1, end);\\n'+\r\n    '    merge(array, begin, mid, end);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// UTILITY FUNCTIONS\\n'+\r\n    '// Function to print an array\\n'+\r\n    'void printArray(int A[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Merge-sort output:\" << endl;\\n'+\r\n    '    for (auto i = 0; i < size; i++)\\n'+\r\n    '        cout << A[i] << \" \";\\n'+\r\n    '    cout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<n; i++){\\n'+\r\n    '    //     cout << arr[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    // int arr[] = { 12, 11, 13, 5, 6, 7 };\\n'+\r\n    '    auto arr_size = n;\\n'+\r\n    '\\n'+\r\n    '    // cout << \"Given array is \\n\";\\n'+\r\n    '    // printArray(arr, arr_size);\\n'+\r\n    '\\n'+\r\n    '    mergeSort(arr, 0, arr_size - 1);\\n'+\r\n    '\\n'+\r\n    '    // cout << \"\\nSorted array is \\n\";\\n'+\r\n    '    printArray(arr, arr_size);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-merge-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '    return 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n    cppQuickSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int* a, int* b)\\n'+\r\n    '{\\n'+\r\n    '\tint t = *a;\\n'+\r\n    '\t*a = *b;\\n'+\r\n    '\t*b = t;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int partition (int arr[], int low, int high)\\n'+\r\n    '{\\n'+\r\n    '\tint pivot = arr[high]; // pivot\\n'+\r\n    '\tint i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far\\n'+\r\n    '\\n'+\r\n    '\tfor (int j = low; j <= high - 1; j++)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tif (arr[j] < pivot)\\n'+\r\n    '\t\t{\\n'+\r\n    '\t\t\ti++; // increment index of smaller element\\n'+\r\n    '\t\t\tswap(&arr[i], &arr[j]);\\n'+\r\n    '\t\t}\\n'+\r\n    '\t}\\n'+\r\n    '\tswap(&arr[i + 1], &arr[high]);\\n'+\r\n    '\treturn (i + 1);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void quickSort(int arr[], int low, int high)\\n'+\r\n    '{\\n'+\r\n    '\tif (low < high)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tint pi = partition(arr, low, high);\\n'+\r\n    '\\n'+\r\n    '\t\tquickSort(arr, low, pi - 1);\\n'+\r\n    '\t\tquickSort(arr, pi + 1, high);\\n'+\r\n    '\t}\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '\tcout << \"Quick-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i = 0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    \\n'+\r\n    '\t// int arr[] = {10, 7, 8, 9, 1, 5};\\n'+\r\n    '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+\r\n    '\tquickSort(arr, 0, n - 1);\\n'+\r\n    '\t// cout << \"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-quick-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n    cppSelectionSort = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void swap(int *xp, int *yp)\\n'+\r\n    '{\\n'+\r\n    '\tint temp = *xp;\\n'+\r\n    '\t*xp = *yp;\\n'+\r\n    '\t*yp = temp;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void selectionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint i, j, min_idx;\\n'+\r\n    '\\n'+\r\n    '\tfor (i = 0; i < n-1; i++)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tmin_idx = i;\\n'+\r\n    '\t\tfor (j = i+1; j < n; j++)\\n'+\r\n    '\t\tif (arr[j] < arr[min_idx])\\n'+\r\n    '\t\t\tmin_idx = j;\\n'+\r\n    '\\n'+\r\n    '\t\tswap(&arr[min_idx], &arr[i]);\\n'+\r\n    '\t}\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '    cout << \"Selection-sort output:\" << endl;\\n'+\r\n    '\tint i;\\n'+\r\n    '\tfor (i=0; i < size; i++)\\n'+\r\n    '\t\tcout << arr[i] << \" \";\\n'+\r\n    '\tcout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"./test-cases/test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {64, 25, 12, 22, 11};\\n'+\r\n    '\t// int n = sizeof(arr)/sizeof(arr[0]);\\n'+\r\n    '\tselectionSort(arr, n);\\n'+\r\n    '\t// cout << \"Sorted array: \\n\";\\n'+\r\n    '\tprintArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-selection-sort-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n    cppReverseArray = '#include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void rvereseArray(int arr[], int start, int end)\\n'+\r\n    '{\\n'+\r\n    '\twhile (start < end)\\n'+\r\n    '\t{\\n'+\r\n    '\t\tint temp = arr[start];\\n'+\r\n    '\t\tarr[start] = arr[end];\\n'+\r\n    '\t\tarr[end] = temp;\\n'+\r\n    '\t\tstart++;\\n'+\r\n    '\t\tend--;\\n'+\r\n    '\t}\\n'+\r\n    '}\t\\n'+\r\n    '\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    'for (int i = 0; i < size; i++)\\n'+\r\n    'cout << arr[i] << \" \";\\n'+\r\n    '\\n'+\r\n    'cout << endl;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main()\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    filename = \"test-case-1.txt\";\\n'+\r\n    '    file.open(filename.c_str());\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {1, 2, 3, 4, 5, 6};\\n'+\r\n    '\t\\n'+\r\n    '\t// int n = sizeof(arr) / sizeof(arr[0]);\\n'+\r\n    '\\n'+\r\n    '\t// printArray(arr, n);\\n'+\r\n    '\t\\n'+\r\n    '\trvereseArray(arr, 0, n-1);\\n'+\r\n    '\t\\n'+\r\n    '\t// cout << \"Reversed array is\" << endl;\\n'+\r\n    '\t\\n'+\r\n    '\t// printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '    ofstream myfile(\"test-case-1-reverse-array-cpp.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\t\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cppCyclicArray = '# include <bits/stdc++.h>\\n'+\r\n    'using namespace std;\\n'+\r\n    '\\n'+\r\n    'void rotate(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '\tint x = arr[n - 1], i;\\n'+\r\n    '\tfor (i = n - 1; i > 0; i--)\\n'+\r\n    '\tarr[i] = arr[i - 1];\\n'+\r\n    '\tarr[0] = x;\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    'int main(int argc, char** argv)\\n'+\r\n    '{\\n'+\r\n    '\\n'+\r\n    '    fstream file;\\n'+\r\n    '    string word, t, q, filename;\\n'+\r\n    '    vector<int> fileInputs;\\n'+\r\n    '    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"Filepath: %s\\n\", str1);\\n'+\r\n    '    // filename = \"../test-case-analysis-prototype/\"+argv[1];\\n'+\r\n    '    file.open(str1);\\n'+\r\n    '    while (file >> word)\\n'+\r\n    '    {\\n'+\r\n    '        fileInputs.push_back(stoi(word));\\n'+\r\n    '    }\\n'+\r\n    '    // for(int i=0; i<fileInputs.size(); i++){\\n'+\r\n    '    //     cout << fileInputs[i] << endl;\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    int n = fileInputs[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for (int i = 0; i < n; i++)\\n'+\r\n    '    {\\n'+\r\n    '        arr[i] = fileInputs[i + 1];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '\t// int arr[] = {1, 2, 3, 4, 5}, i;\\n'+\r\n    '\t// int n = sizeof(arr) /\\n'+\r\n    '\t// \t\tsizeof(arr[0]);\\n'+\r\n    '\\n'+\r\n    '\t// cout << \"Given array is \\n\";\\n'+\r\n    '\t// for (i = 0; i < n; i++)\\n'+\r\n    '\t// \tcout << arr[i] << \\' \\';\\n'+\r\n    '\\n'+\r\n    '\trotate(arr, n);\\n'+\r\n    '\\n'+\r\n    '\t// cout << \"\\nRotated array is\\n\";\\n'+\r\n    '\t// for (i = 0; i < n; i++)\\n'+\r\n    '\t// \tcout << arr[i] << \\' \\';\\n'+\r\n    '    fstream myfile;\\n'+\r\n    '    myfile.open(\"../test-case-analysis-prototype/output.txt\");\\n'+\r\n    '    if (myfile.is_open())\\n'+\r\n    '    {\\n'+\r\n    '        for (int count = 0; count < n; count++)\\n'+\r\n    '        {\\n'+\r\n    '            myfile << arr[count] << endl;\\n'+\r\n    '        }\\n'+\r\n    '        myfile.close();\\n'+\r\n    '    }\\n'+\r\n    '    else\\n'+\r\n    '        cout << \"Unable to open file\";\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}';\r\n\r\n    cBubbleSort = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void swap(int* xp, int* yp)\\n'+\r\n    '{\\n'+\r\n    '    int temp = *xp;\\n'+\r\n    '    *xp = *yp;\\n'+\r\n    '    *yp = temp;\\n'+\r\n    '}\\n'+\r\n    ' \\n'+\r\n    '// A function to implement bubble sort\\n'+\r\n    'void bubbleSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '    int i, j;\\n'+\r\n    '    for (i = 0; i < n - 1; i++)\\n'+\r\n    ' \\n'+\r\n    '        // Last i elements are already in place\\n'+\r\n    '        for (j = 0; j < n - i - 1; j++)\\n'+\r\n    '            if (arr[j] > arr[j + 1])\\n'+\r\n    '                swap(&arr[j], &arr[j + 1]);\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    bubbleSort(arr, n);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    // printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\"%d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cInsertionSort = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void insertionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '    int i, key, j;\\n'+\r\n    '    for (i = 1; i < n; i++) {\\n'+\r\n    '        key = arr[i];\\n'+\r\n    '        j = i - 1;\\n'+\r\n    ' \\n'+\r\n    '        /* Move elements of arr[0..i-1], that are\\n'+\r\n    '          greater than key, to one position ahead\\n'+\r\n    '          of their current position */\\n'+\r\n    '        while (j >= 0 && arr[j] > key) {\\n'+\r\n    '            arr[j + 1] = arr[j];\\n'+\r\n    '            j = j - 1;\\n'+\r\n    '        }\\n'+\r\n    '        arr[j + 1] = key;\\n'+\r\n    '    }\\n'+\r\n    '} \\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    insertionSort(arr, n);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    // printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cMergeSort = '// C program to implement\\n'+\r\n'// the above approach\\n'+\r\n'#include <stdio.h>\\n'+\r\n'#include <stdlib.h>\\n'+\r\n'#include <string.h>\\n'+\r\n'\\n'+\r\n'void merge(int arr[], int l, int m, int r)\\n'+\r\n'{\\n'+\r\n'    int i, j, k;\\n'+\r\n'    int n1 = m - l + 1;\\n'+\r\n'    int n2 = r - m;\\n'+\r\n'  \\n'+\r\n'    /* create temp arrays */\\n'+\r\n'    int L[n1], R[n2];\\n'+\r\n'  \\n'+\r\n'    /* Copy data to temp arrays L[] and R[] */\\n'+\r\n'    for (i = 0; i < n1; i++)\\n'+\r\n'        L[i] = arr[l + i];\\n'+\r\n'    for (j = 0; j < n2; j++)\\n'+\r\n'        R[j] = arr[m + 1 + j];\\n'+\r\n'  \\n'+\r\n'    /* Merge the temp arrays back into arr[l..r]*/\\n'+\r\n'    i = 0; // Initial index of first subarray\\n'+\r\n'    j = 0; // Initial index of second subarray\\n'+\r\n'    k = l; // Initial index of merged subarray\\n'+\r\n'    while (i < n1 && j < n2) {\\n'+\r\n'        if (L[i] <= R[j]) {\\n'+\r\n'            arr[k] = L[i];\\n'+\r\n'            i++;\\n'+\r\n'        }\\n'+\r\n'        else {\\n'+\r\n'            arr[k] = R[j];\\n'+\r\n'            j++;\\n'+\r\n'        }\\n'+\r\n'        k++;\\n'+\r\n'    }\\n'+\r\n'  \\n'+\r\n'    /* Copy the remaining elements of L[], if there\\n'+\r\n'    are any */\\n'+\r\n'    while (i < n1) {\\n'+\r\n'        arr[k] = L[i];\\n'+\r\n'        i++;\\n'+\r\n'        k++;\\n'+\r\n'    }\\n'+\r\n'  \\n'+\r\n'    /* Copy the remaining elements of R[], if there\\n'+\r\n'    are any */\\n'+\r\n'    while (j < n2) {\\n'+\r\n'        arr[k] = R[j];\\n'+\r\n'        j++;\\n'+\r\n'        k++;\\n'+\r\n'    }\\n'+\r\n'}\\n'+\r\n'  \\n'+\r\n'/* l is for left index and r is right index of the\\n'+\r\n'sub-array of arr to be sorted */\\n'+\r\n'void mergeSort(int arr[], int l, int r)\\n'+\r\n'{\\n'+\r\n'    if (l < r) {\\n'+\r\n'        // Same as (l+r)/2, but avoids overflow for\\n'+\r\n'        // large l and h\\n'+\r\n'        int m = l + (r - l) / 2;\\n'+\r\n'  \\n'+\r\n'        // Sort first and second halves\\n'+\r\n'        mergeSort(arr, l, m);\\n'+\r\n'        mergeSort(arr, m + 1, r);\\n'+\r\n'  \\n'+\r\n'        merge(arr, l, m, r);\\n'+\r\n'    }\\n'+\r\n'}\\n'+\r\n'\\n'+\r\n' \\n'+\r\n'/* Utility that prints out an array on a line */\\n'+\r\n'void printArray(int arr[], int size)\\n'+\r\n'{\\n'+\r\n'  int i;\\n'+\r\n'  for (i=0; i < size; i++)\\n'+\r\n'    printf(\"%d \", arr[i]);\\n'+\r\n' \\n'+\r\n'  printf(\"\\n\");\\n'+\r\n'}\\n'+\r\n'\\n'+\r\n'// Driver code\\n'+\r\n'int main(int argc, char* argv[])\\n'+\r\n'{\\n'+\r\n'\tFILE* ptr;\\n'+\r\n'\tchar ch;\\n'+\r\n'\\n'+\r\n'\t// Opening file in reading mode\\n'+\r\n'    char str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n'    strcat(str1, argv[1]);\\n'+\r\n'    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n'\tptr = fopen(str1, \"r\");\\n'+\r\n'\\n'+\r\n'\tif (NULL == ptr) {\\n'+\r\n'\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n'\t}\\n'+\r\n'\\n'+\r\n'\t// printf(\"content of this file are \\n\");\\n'+\r\n'\\n'+\r\n'\t// Printing what is written in file\\n'+\r\n'\t// character by character using loop.\\n'+\r\n'    char temp[101];\\n'+\r\n'    int idx = 0;\\n'+\r\n'    int arr_copy[101];\\n'+\r\n'    int arr_copy_idx = 0;\\n'+\r\n'\tdo {\\n'+\r\n'        char temp1[10] = \"\";\\n'+\r\n'        int idx1 = 0;\\n'+\r\n'\t\tch = fgetc(ptr);\\n'+\r\n'        if(ch==\\'\\\\n\\'){\\n'+\r\n'            for(int i=0; i<idx; i++){\\n'+\r\n'                temp1[idx1++] = temp[i];\\n'+\r\n'            }\\n'+\r\n'            // printf(\"\\n\");\\n'+\r\n'            idx = 0;\\n'+\r\n'            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n'        }\\n'+\r\n'        else{\\n'+\r\n'            temp[idx++] = ch;\\n'+\r\n'        }\\n'+\r\n'\t} while (ch != EOF);\\n'+\r\n'\\n'+\r\n'    char temp1[10] = \"\";\\n'+\r\n'    int idx1 = 0;\\n'+\r\n'    for(int i=0; i<idx; i++){\\n'+\r\n'        for(int i=0; i<idx; i++){\\n'+\r\n'            temp1[idx1++] = temp[i];\\n'+\r\n'        }\\n'+\r\n'            // printf(\"\\n\");\\n'+\r\n'            idx = 0;\\n'+\r\n'            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n'            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n'    }\\n'+\r\n'    // printf(\"\\n\");\\n'+\r\n'\\n'+\r\n'\t// Closing the file\\n'+\r\n'\tfclose(ptr);\\n'+\r\n'\\n'+\r\n'\\n'+\r\n'    int n = arr_copy[0];\\n'+\r\n'    int arr[n];\\n'+\r\n'    for(int i=1; i<=n; i++){\\n'+\r\n'        arr[i-1] = arr_copy[i];\\n'+\r\n'    }\\n'+\r\n'\\n'+\r\n'    // for(int i=0; i<=n; i++){\\n'+\r\n'    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n'    // }\\n'+\r\n'\\n'+\r\n'    mergeSort(arr, 0, n - 1);\\n'+\r\n'    // printf(\"Reversed array is \\n\");\\n'+\r\n'    // printArray(arr, n);\\n'+\r\n'\\n'+\r\n'\\n'+\r\n'\\n'+\r\n'   FILE *fptr;\\n'+\r\n'\\n'+\r\n'   // use appropriate location if you are using MacOS or Linux\\n'+\r\n'   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n'\\n'+\r\n'   if(fptr == NULL)\\n'+\r\n'   {\\n'+\r\n'      printf(\"Error!\");   \\n'+\r\n'      exit(1);             \\n'+\r\n'   }\\n'+\r\n'\\n'+\r\n'//    fprintf(fptr,\"%d\",num);\\n'+\r\n'   for(int i=0; i<n; i++){\\n'+\r\n'       fprintf(fptr,\"%d\\n\",arr[i]);\\n'+\r\n'   }\\n'+\r\n'   fclose(fptr);\\n'+\r\n'\\n'+\r\n'\treturn 0;\\n'+\r\n'}\\n'+\r\n'';\r\n\r\n    cQuickSort = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void quicksort(int number[],int first,int last){\\n'+\r\n    '   int i, j, pivot, temp;\\n'+\r\n    '\\n'+\r\n    '   if(first<last){\\n'+\r\n    '      pivot=first;\\n'+\r\n    '      i=first;\\n'+\r\n    '      j=last;\\n'+\r\n    '\\n'+\r\n    '      while(i<j){\\n'+\r\n    '         while(number[i]<=number[pivot]&&i<last)\\n'+\r\n    '            i++;\\n'+\r\n    '         while(number[j]>number[pivot])\\n'+\r\n    '            j--;\\n'+\r\n    '         if(i<j){\\n'+\r\n    '            temp=number[i];\\n'+\r\n    '            number[i]=number[j];\\n'+\r\n    '            number[j]=temp;\\n'+\r\n    '         }\\n'+\r\n    '      }\\n'+\r\n    '\\n'+\r\n    '      temp=number[pivot];\\n'+\r\n    '      number[pivot]=number[j];\\n'+\r\n    '      number[j]=temp;\\n'+\r\n    '      quicksort(number,first,j-1);\\n'+\r\n    '      quicksort(number,j+1,last);\\n'+\r\n    '\\n'+\r\n    '   }\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    quicksort(arr,0,n-1);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cSelectionSort = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void swap(int *xp, int *yp)\\n'+\r\n    '{\\n'+\r\n    '    int temp = *xp;\\n'+\r\n    '    *xp = *yp;\\n'+\r\n    '    *yp = temp;\\n'+\r\n    '}\\n'+\r\n    '  \\n'+\r\n    'void selectionSort(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '    int i, j, min_idx;\\n'+\r\n    '  \\n'+\r\n    '    // One by one move boundary of unsorted subarray\\n'+\r\n    '    for (i = 0; i < n-1; i++)\\n'+\r\n    '    {\\n'+\r\n    '        // Find the minimum element in unsorted array\\n'+\r\n    '        min_idx = i;\\n'+\r\n    '        for (j = i+1; j < n; j++)\\n'+\r\n    '          if (arr[j] < arr[min_idx])\\n'+\r\n    '            min_idx = j;\\n'+\r\n    '  \\n'+\r\n    '        // Swap the found minimum element with the first element\\n'+\r\n    '        swap(&arr[min_idx], &arr[i]);\\n'+\r\n    '    }\\n'+\r\n    '} \\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    selectionSort(arr, n);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    // printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cReverseArray = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void rvereseArray(int arr[], int start, int end)\\n'+\r\n    '{\\n'+\r\n    '    int temp;\\n'+\r\n    '    while (start < end)\\n'+\r\n    '    {\\n'+\r\n    '        temp = arr[start];  \\n'+\r\n    '        arr[start] = arr[end];\\n'+\r\n    '        arr[end] = temp;\\n'+\r\n    '        start++;\\n'+\r\n    '        end--;\\n'+\r\n    '    }  \\n'+\r\n    '}    \\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    rvereseArray(arr, 0, n-1);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n    cCyclicArray = '// C program to implement\\n'+\r\n    '// the above approach\\n'+\r\n    '#include <stdio.h>\\n'+\r\n    '#include <stdlib.h>\\n'+\r\n    '#include <string.h>\\n'+\r\n    '\\n'+\r\n    'void rotate(int arr[], int n)\\n'+\r\n    '{\\n'+\r\n    '   int x = arr[n-1], i;\\n'+\r\n    '   for (i = n-1; i > 0; i--)\\n'+\r\n    '      arr[i] = arr[i-1];\\n'+\r\n    '   arr[0] = x;\\n'+\r\n    '}\\n'+\r\n    ' \\n'+\r\n    '/* Utility that prints out an array on a line */\\n'+\r\n    'void printArray(int arr[], int size)\\n'+\r\n    '{\\n'+\r\n    '  int i;\\n'+\r\n    '  for (i=0; i < size; i++)\\n'+\r\n    '    printf(\"%d \", arr[i]);\\n'+\r\n    ' \\n'+\r\n    '  printf(\"\\n\");\\n'+\r\n    '}\\n'+\r\n    '\\n'+\r\n    '// Driver code\\n'+\r\n    'int main(int argc, char* argv[])\\n'+\r\n    '{\\n'+\r\n    '\tFILE* ptr;\\n'+\r\n    '\tchar ch;\\n'+\r\n    '\\n'+\r\n    '\t// Opening file in reading mode\\n'+\r\n    '\tchar str1[100] = \"../test-case-analysis-prototype/test-cases/\";\\n'+\r\n    '    strcat(str1, argv[1]);\\n'+\r\n    '    printf(\"fileCPath: %s\\n\", str1);\\n'+\r\n    '\tptr = fopen(str1, \"r\");\\n'+\r\n    '\\n'+\r\n    '\tif (NULL == ptr) {\\n'+\r\n    '\t\tprintf(\"file cant be opened \\n\");\\n'+\r\n    '\t}\\n'+\r\n    '\\n'+\r\n    '\t// printf(\"content of this file are \\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Printing what is written in file\\n'+\r\n    '\t// character by character using loop.\\n'+\r\n    '    char temp[101];\\n'+\r\n    '    int idx = 0;\\n'+\r\n    '    int arr_copy[101];\\n'+\r\n    '    int arr_copy_idx = 0;\\n'+\r\n    '\tdo {\\n'+\r\n    '        char temp1[10] = \"\";\\n'+\r\n    '        int idx1 = 0;\\n'+\r\n    '\t\tch = fgetc(ptr);\\n'+\r\n    '        if(ch==\\'\\\\n\\'){\\n'+\r\n    '            for(int i=0; i<idx; i++){\\n'+\r\n    '                temp1[idx1++] = temp[i];\\n'+\r\n    '            }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '        }\\n'+\r\n    '        else{\\n'+\r\n    '            temp[idx++] = ch;\\n'+\r\n    '        }\\n'+\r\n    '\t} while (ch != EOF);\\n'+\r\n    '\\n'+\r\n    '    char temp1[10] = \"\";\\n'+\r\n    '    int idx1 = 0;\\n'+\r\n    '    for(int i=0; i<idx; i++){\\n'+\r\n    '        for(int i=0; i<idx; i++){\\n'+\r\n    '            temp1[idx1++] = temp[i];\\n'+\r\n    '        }\\n'+\r\n    '            // printf(\"\\n\");\\n'+\r\n    '            idx = 0;\\n'+\r\n    '            // printf(\"%d\\n\",atoi(temp1));\\n'+\r\n    '            arr_copy[arr_copy_idx++] = atoi(temp1);\\n'+\r\n    '    }\\n'+\r\n    '    // printf(\"\\n\");\\n'+\r\n    '\\n'+\r\n    '\t// Closing the file\\n'+\r\n    '\tfclose(ptr);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '    int n = arr_copy[0];\\n'+\r\n    '    int arr[n];\\n'+\r\n    '    for(int i=1; i<=n; i++){\\n'+\r\n    '        arr[i-1] = arr_copy[i];\\n'+\r\n    '    }\\n'+\r\n    '\\n'+\r\n    '    // for(int i=0; i<=n; i++){\\n'+\r\n    '    //     printf(\"%d \",arr_copy[i]);\\n'+\r\n    '    // }\\n'+\r\n    '\\n'+\r\n    '    rotate(arr, n);\\n'+\r\n    '    // printf(\"Reversed array is \\n\");\\n'+\r\n    '    printArray(arr, n);\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    '   FILE *fptr;\\n'+\r\n    '\\n'+\r\n    '   // use appropriate location if you are using MacOS or Linux\\n'+\r\n    '   fptr = fopen(\"../test-case-analysis-prototype/output.txt\",\"w\");\\n'+\r\n    '\\n'+\r\n    '   if(fptr == NULL)\\n'+\r\n    '   {\\n'+\r\n    '      printf(\"Error!\");   \\n'+\r\n    '      exit(1);             \\n'+\r\n    '   }\\n'+\r\n    '\\n'+\r\n    '//    fprintf(fptr,\"%d\",num);\\n'+\r\n    '   for(int i=0; i<n; i++){\\n'+\r\n    '       fprintf(fptr,\" %d\\n\",arr[i]);\\n'+\r\n    '   }\\n'+\r\n    '   fclose(fptr);\\n'+\r\n    '\\n'+\r\n    '\treturn 0;\\n'+\r\n    '}\\n'+\r\n    '';\r\n\r\n\r\n    pyBubbleSort = 'import sys\\n'+\r\n    '\\n'+\r\n    'def bubbleSort(arr, n):\\n'+\r\n    ' \\n'+\r\n    '    # Traverse through all array elements\\n'+\r\n    '    for i in range(n):\\n'+\r\n    ' \\n'+\r\n    '        # Last i elements are already in place\\n'+\r\n    '        for j in range(0, n-i-1):\\n'+\r\n    ' \\n'+\r\n    '            # traverse the array from 0 to n-i-1\\n'+\r\n    '            # Swap if the element found is greater\\n'+\r\n    '            # than the next element\\n'+\r\n    '            if arr[j] > arr[j+1]:\\n'+\r\n    '                arr[j], arr[j+1] = arr[j+1], arr[j]\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '#arr= [1, 2, 3, 4, 5]\\n'+\r\n    '# n = len(arr)\\n'+\r\n    '# print (\"Given array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'bubbleSort(arr, n)\\n'+\r\n    '\\n'+\r\n    '# print (\"\\nRotated array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \\' \\')\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\\'\\\\n\\')\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()\\n'+\r\n    '';\r\n\r\n    pyInsertionSort = 'import sys\\n'+\r\n    '\\n'+\r\n    'def insertionSort(arr, n):\\n'+\r\n    ' \\n'+\r\n    '    # Traverse through 1 to len(arr)\\n'+\r\n    '    for i in range(1, n):\\n'+\r\n    ' \\n'+\r\n    '        key = arr[i]\\n'+\r\n    ' \\n'+\r\n    '        # Move elements of arr[0..i-1], that are\\n'+\r\n    '        # greater than key, to one position ahead\\n'+\r\n    '        # of their current position\\n'+\r\n    '        j = i-1\\n'+\r\n    '        while j >= 0 and key < arr[j] :\\n'+\r\n    '                arr[j + 1] = arr[j]\\n'+\r\n    '                j -= 1\\n'+\r\n    '        arr[j + 1] = key\\n'+\r\n    '\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/test-cases/\\'+sys.argv[1], \\'r\\')\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '#arr= [1, 2, 3, 4, 5]\\n'+\r\n    '# n = len(arr)\\n'+\r\n    '# print (\"Given array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'insertionSort(arr, n)\\n'+\r\n    '\\n'+\r\n    '# print (\"\\nRotated array is\")\\n'+\r\n    '# for i in range(0, n):\\n'+\r\n    '# \tprint (arr[i], end = \\' \\')\\n'+\r\n    '\\n'+\r\n    'file1 = open(\\'../test-case-analysis-prototype/output.txt\\', \\'w\\')\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \\' \\')\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\\'\\\\n\\')\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()\\n'+\r\n    '';\r\n\r\n    pyMergeSort = 'python mergesort';\r\n    pyQuickSort = 'python quicksort';\r\n    pySelectionSort = 'python selectionsort';\r\n    pyCyclicArray = \"\";\r\n    pyReverseArray = 'def reverseList(A, start, end):\\n'+\r\n    '\twhile start < end:\\n'+\r\n    '\t\tA[start], A[end] = A[end], A[start]\\n'+\r\n    '\t\tstart += 1\\n'+\r\n    '\t\tend -= 1\\n'+\r\n    '\\n'+\r\n    'arr = []\\n'+\r\n    'n = -1\\n'+\r\n    'flag = 0\\n'+\r\n    'file1 = open(\"test-case-1.txt\", \"r\")\\n'+\r\n    'Lines = file1.readlines()\\n'+\r\n    'for line in Lines:\\n'+\r\n    '    curr_line = line.strip()\\n'+\r\n    '    # print(curr_line)\\n'+\r\n    '    converted_num = int(curr_line)\\n'+\r\n    '    # print(converted_num)\\n'+\r\n    '    if(flag==0):\\n'+\r\n    '        flag = 1\\n'+\r\n    '        n = converted_num\\n'+\r\n    '    else:\\n'+\r\n    '        arr.append(converted_num)\\n'+\r\n    '\\n'+\r\n    '# A = [1, 2, 3, 4, 5, 6]\\n'+\r\n    '# print(A)\\n'+\r\n    'reverseList(arr, 0, n-1)\\n'+\r\n    '# print(\"Reversed list is\")\\n'+\r\n    '# print(A)\\n'+\r\n    '\\n'+\r\n    'file1 = open(\"output.txt\", \"w\")\\n'+\r\n    'for i in range(0, n):\\n'+\r\n    '\t# print (arr[i], end = \" \")\\n'+\r\n    '    converted_arr_i = str(arr[i])\\n'+\r\n    '    file1.writelines(converted_arr_i)\\n'+\r\n    '    file1.writelines(\"\\n\")\\n'+\r\n    '# file1.writelines(L)\\n'+\r\n    'file1.close()';\r\n}\r\n\r\nexport default Codes"]},"metadata":{},"sourceType":"module"}